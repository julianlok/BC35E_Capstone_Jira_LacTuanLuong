{"version":3,"file":"static/js/814.5b6cb16d.chunk.js","mappings":"2MAqFA,IAvEe,SAAH,GAME,IALZA,EAAQ,EAARA,SACAC,EAAO,EAAPA,QAAQ,EAAD,EACPC,UAAAA,OAAS,MAAG,GAAE,MACdC,UAAAA,OAAS,OAAQ,EACdC,GAAI,YAEDC,EAAUF,GACd,gBAAKD,UAAU,sGAEfF,EAGEM,EACF,sEAEF,OAAQF,EAAKG,MACX,IAAK,UACHD,GAEE,4EACF,MAEF,IAAK,YACHA,GAEE,8DACF,MAEF,IAAK,SACHA,GAEE,6GACF,MAEF,IAAK,UACHA,GAEE,mEACF,MAEF,IAAK,SACHA,GAEE,iEAMN,OAAIF,EAAKI,MAEL,SAAC,KAAI,CAACC,GAAIL,EAAKI,KAAMN,UAAWI,EAAmB,IAAMJ,EAAU,SAChEF,KAIL,mCACEC,QAASA,EACTC,UAAS,yBACPI,EACA,KACGH,EAAY,iCAAmC,IAAG,YACnDD,IACAE,GAAI,aAEPC,IAGP,C,4CC/DA,IAJiB,SAAH,GAA6B,IAAvBL,EAAQ,EAARA,SAClB,OAAO,gBAAKE,UAAU,YAAW,SAAEF,GACrC,C,4CCDA,IAda,SAAH,GAA8C,IAAxCA,EAAQ,EAARA,SAAUU,EAAI,EAAJA,KAAMR,EAAS,EAATA,UAC9B,OACE,8BACGQ,IACC,gBACER,UAAS,6FAAwFA,GAAY,SAE5GF,KAKX,C,4CCDA,IAXe,SAAH,GAAuD,IAAjDA,EAAQ,EAARA,SAAUC,EAAO,EAAPA,QAAQ,EAAD,EAAEC,UAAAA,OAAS,MAAG,IAAG,EAClD,OACE,gBACEA,UAAS,wNAAmNA,GAC5ND,QAASA,EAAQ,SAEhBD,GAGP,C,4CC0CA,IAnDe,SAAH,GAME,IALZU,EAAI,EAAJA,KACAT,EAAO,EAAPA,QAAQ,EAAD,EACPU,YAAAA,OAAW,MAAG,GAAE,MAChBT,UAAAA,OAAS,MAAG,yBAAwB,EACpCU,EAAO,EAAPA,QAEA,OACE,iBACEC,IAAKD,EACLV,UAAS,wIAAmIA,GAC5ID,QAASA,EAAQ,WAEjB,0BAAOU,KACP,0BACGD,GACC,gBACEI,MAAM,6BACNZ,UAAU,UACVa,KAAK,OACLC,QAAQ,YACRC,OAAO,eACPC,YAAY,IAAG,UAEf,iBACEC,cAAc,QACdC,eAAe,QACfC,EAAE,qBAIN,gBACEP,MAAM,6BACNZ,UAAU,UACVa,KAAK,OACLC,QAAQ,YACRC,OAAO,eACPC,YAAY,IAAG,UAEf,iBACEC,cAAc,QACdC,eAAe,QACfC,EAAE,yBAOhB,C,4CCfA,IA/BqB,SAAH,GAA6B,IAAvBC,EAAQ,EAARA,SACtB,OACE,iBAAKpB,UAAU,2GAA0G,WACvH,gBAAKA,UAAU,cAAa,UAC1B,kBACEoB,SAAUA,EACVC,KAAK,OACLZ,YAAY,YACZT,UAAU,wEAGd,gBAAKA,UAAU,sHAAqH,UAClI,gBACEY,MAAM,6BACNC,KAAK,OACLC,QAAQ,YACRE,YAAY,MACZD,OAAO,eACPf,UAAU,UAAS,UAEnB,iBACEiB,cAAc,QACdC,eAAe,QACfC,EAAE,qFAMd,C,qICEA,KAAeG,EAAAA,EAAAA,oBA/BD,SAAH,GAIQ,IAHjBxB,EAAQ,EAARA,SAAS,EAAD,EACRE,UAAAA,OAAS,MAAG,aAAY,EACrBuB,GAAK,YAER,GAAsBC,EAAAA,EAAAA,IAASD,GAAM,eAA9BE,EAAK,KAAEC,EAAI,KAClB,OACE,iBAAK1B,UAAU,YAAW,WACxB,kCACEA,UAAS,sHAAiHA,EAAS,YACjI0B,EAAKC,SAAWD,EAAKE,MACjB,0BACA,iDAAgD,YAClD9B,EAAW,QAAU,KACrByB,GACAE,IAELC,EAAKC,SAAWD,EAAKE,OACpB,iBAAM5B,UAAU,wGAAuG,SACpH0B,EAAKE,QAEN,KACH9B,IACC,iBAAME,UAAU,wEAAuE,SACpFF,MAKX,GAEwC,CACtC+B,kBAAmBC,EAAAA,G,mHCYrB,IAxCiB,SAAH,GAAmD,IAA7CC,EAAO,EAAPA,QAASC,EAAI,EAAJA,KAAMC,EAAK,EAALA,MAAUV,GAAK,YAChD,MACO,aADCQ,GAGF,+BACE,SAAC,MAAK,gBAACG,GAAIF,EAAMA,KAAMA,GAAUT,GAAK,aACnC,YAA2B,IAAxBY,EAAI,EAAJA,KAAMV,EAAK,EAALA,MACAW,EAAkBD,EAAlBC,cAER,OACE,+BACE,SAAC,IAAM,CACLH,MAAOR,EAAMQ,MACbI,aAAcJ,EACdK,KAAM,CACJC,OAAQ,IACRC,SAAS,EACTC,QACE,0JAIFC,cACE,mEAEJC,eAAgB,SAACC,EAASC,GACxBT,EAAcJ,EAAMY,EACtB,KAIR,OAKC,IAEb,C,4CC3BA,IAbc,SAACrB,GACb,IAAQzB,EAAoCyB,EAApCzB,SAAS,EAA2ByB,EAA1BuB,QAAAA,OAAO,MAAG,GAAE,EAAE/C,EAAYwB,EAAZxB,QAChC,OACE,kBACEA,QAASA,EACT+C,QAASA,EACT9C,UAAU,6FAA4F,SAErGF,GAGP,C,wFCTA,IAAMiD,EANN,WACE,IAAMC,EAAUC,SAASC,cAAc,OAEvC,OADAF,EAAQd,GAAK,iBACNc,CACT,CAEyBG,GAqCzB,EAnCe,SAAH,GAQO,IAAD,IAPhBC,mBAAAA,OAAkB,MAAG,GAAE,MACvBC,cAAAA,OAAa,MAAG,GAAE,MAClBC,eAAAA,OAAc,MAAG,CAAC,EAAC,MACnBC,UAAAA,OAAS,MAAG,CAAC,EAAC,EACdC,EAAO,EAAPA,QAAQ,EAAD,EACPC,QAAAA,OAAO,OAAQ,EACf3D,EAAQ,EAARA,UAEA4D,EAAAA,EAAAA,YAAU,WACRT,SAASU,KAAKC,YAAYb,EAC5B,GAAG,IAEH,IAAMc,GACJ,iBACE7D,UAAS,gCACPyD,EAAU,GAAK,sBAAqB,YAClCL,GACJU,MAAOR,EAAe,WAEtB,gBACEtD,UAAU,mDACVD,QAASyD,KAEX,gBACExD,UAAS,gCAA2BqD,GACpCS,MAAOP,EAAU,SAEhBzD,OAIP,OAAOiE,EAAAA,EAAAA,cAAaF,EAAed,EACrC,EC3BA,EAdkB,SAAH,GAAoD,IAA9CU,EAAO,EAAPA,QAAS3D,EAAQ,EAARA,SAAU0D,EAAO,EAAPA,QACtC,OACE,+BACE,SAAC,EAAM,CACLC,QAASA,EACTD,QAASA,EACTJ,mBAAmB,mCAAkC,SAEpDtD,KAIT,C,4CCJA,IARuB,SAACyB,GACtB,OACE,gBAAKvB,UAAU,yCAAwC,SAAC,gCAI5D,C,4CCIA,IARkB,SAAH,GAA6B,IAAvBF,EAAQ,EAARA,SACnB,OACE,gBAAKE,UAAU,gDAA+C,SAC3DF,GAGP,C,4CCCA,IANgB,SAAH,GAAwD,IAAlDA,EAAQ,EAARA,SAAS,EAAD,EAAEE,UAAAA,OAAS,MAAG,cAAa,EACpD,OACE,gBAAKA,UAAS,iCAA4BA,GAAY,SAAEF,GAE5D,C,4CCmBA,IAxBmB,SAAH,GAAuC,IAAD,IAAhCC,QAAAA,OAAO,MAAG,WAAO,EAAC,EACtC,OACE,iBACEC,UAAU,sKACVD,QAASA,EAAQ,UAEjB,gBACEa,MAAM,6BACNZ,UAAU,UACVa,KAAK,OACLC,QAAQ,YACRC,OAAO,eACPC,YAAY,IAAG,UAEf,iBACEC,cAAc,QACdC,eAAe,QACfC,EAAE,oIAKZ,C,2CCEA,IAxBiB,SAAH,GAAuC,IAAD,IAAhCpB,QAAAA,OAAO,MAAG,WAAO,EAAC,EACpC,OACE,iBACEC,UAAU,qKACVD,QAASA,IAAU,UAEnB,gBACEa,MAAM,6BACNZ,UAAU,UACVa,KAAK,OACLC,QAAQ,YACRC,OAAO,eACPC,YAAY,IAAG,UAEf,iBACEC,cAAc,QACdC,eAAe,QACfC,EAAE,8HAKZ,C,4CCPA,IAnBkB,WAChB,OACE,iBAAMnB,UAAU,eAAc,UAC5B,gBACEY,MAAM,6BACNE,QAAQ,YACRD,KAAK,eACLb,UAAU,UAAS,UAEnB,iBACEgE,SAAS,UACT7C,EAAE,uNACF8C,SAAS,eAKnB,C,+EClBe,SAASC,IACtB,OAAwBC,EAAAA,EAAAA,WAAkB,GAAM,eAAzC3D,EAAI,KAAE4D,EAAO,KACd1D,GAAU2D,EAAAA,EAAAA,QAAuB,MAgBvC,OAdAX,EAAAA,EAAAA,YAAU,WACR,SAASY,EAA8BC,GACjC7D,EAAQ8D,UAAY9D,EAAQ8D,QAAQC,SAASF,EAAGG,SAClDN,GAAQ,EAEZ,CAIA,OAFAnB,SAAS0B,iBAAiB,QAASL,GAE5B,WACLrB,SAAS2B,oBAAoB,QAASN,EACxC,CACF,GAAG,IAEI,CAAE9D,KAAAA,EAAM4D,QAAAA,EAAS1D,QAAAA,EAC1B,C,+VCgtBA,UA/rBgB,SAACa,GAAkB,IAAD,EAEhC,GAAwCsD,EAAAA,EAAAA,KACtC,SAACC,GAAgB,OAAKA,EAAMC,cAAc,IADpCC,EAAU,EAAVA,WAAYC,EAAe,EAAfA,gBAIZC,GAAYL,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMK,WAAW,IAA/DD,QAEFE,GAAUf,EAAAA,EAAAA,QAAuB,MACjCgB,GAAwBC,EAAAA,EAAAA,MAE9B,GAAkCnB,EAAAA,EAAAA,WAAkB,GAAM,eAAnDlE,EAAS,KAAEsF,EAAY,KAC9B,GAAmCrB,EAAAA,EAAAA,KAA3B1D,EAAI,EAAJA,KAAM4D,EAAO,EAAPA,QAAS1D,EAAO,EAAPA,QACjB8E,EAAuB,WAC3BpB,GAAS5D,EACX,EAEA,GAAsC2D,EAAAA,EAAAA,UAAwB,IAAG,eAA1DsB,EAAW,KAAEC,EAAc,KAElC,GAA4BvB,EAAAA,EAAAA,UAAiB,IAAG,gBAAzCwB,GAAM,MAAEC,GAAS,MACxB,IAAgCzB,EAAAA,EAAAA,WAAkB,GAAM,iBAAjD0B,GAAQ,MAAEC,GAAW,MAC5B,IAA0C3B,EAAAA,EAAAA,WAAkB,GAAM,iBAA3D4B,GAAa,MAAEC,GAAgB,MACtC,IAA8C7B,EAAAA,EAAAA,WAAkB,GAAM,iBAA/D8B,GAAe,MAAEC,GAAkB,MAC1C,IACE/B,EAAAA,EAAAA,WAAkB,GAAM,iBADnBgC,GAAsB,MAAEC,GAAyB,MAGlDC,GAAiB,yCAAG,WAAOnE,GAAU,sEAGlB,OAFvB4D,IAAY,GACZP,GAAa,GACbS,IAAiB,GAAM,SAEjBX,GAASiB,EAAAA,EAAAA,OAAyB,KAAD,EACvCZ,EAAeV,EAAWuB,QAAO,SAACC,GAAC,OAAKA,EAAEtE,KAAOA,CAAE,KAEnDqD,GAAa,GAAO,2CACrB,gBATsB,sCAWjBkB,GAAuB,yCAAG,WAAOvE,GAAU,sEAEtB,OADzBqD,GAAa,GACbW,IAAmB,GAAM,SACnBb,GAASqB,EAAAA,EAAAA,OAAc,KAAD,EAC5BhB,EAAeV,EAAWuB,QAAO,SAACC,GAAC,OAAKA,EAAEtE,KAAOA,CAAE,KACnDqD,GAAa,GAAO,2CACrB,gBAN4B,sCAQvBoB,GAA8B,yCAAG,WAAOzE,GAAU,sEACtDqD,GAAa,GACba,IAA0B,GAC1BV,EAAeV,EAAWuB,QAAO,SAACC,GAAC,OAAKA,EAAEtE,KAAOA,CAAE,KACnDqD,GAAa,GAAO,2CACrB,gBALmC,sCAiB9BqB,IAAQC,EAAAA,EAAAA,IAAaC,EAAAA,KAE3BpD,EAAAA,EAAAA,YAAU,WACR2B,GAAS0B,EAAAA,EAAAA,MACX,GAAG,IAEH,IAAQC,IAAQC,EAAAA,EAAAA,MAARD,IAER,IAA8B7C,EAAAA,EAAAA,UAAS,GAAE,iBAAlCK,GAAO,MAAE0C,GAAU,MAC1B,IAAsC/C,EAAAA,EAAAA,UAAwB,IAAG,iBAA1DgD,GAAW,MAAEC,GAAc,OAClC1D,EAAAA,EAAAA,YAAU,WACR0D,GAAepC,EAAuB,OAAVA,QAAU,IAAVA,OAAU,EAAVA,EAAYqC,MAAM,EAAG,GAAK,GACxD,GAAG,CAACrC,IAEJ,IArB6BsC,GA0B7B,OACE,gCAEGnB,KACC,SAAC,IAAS,CACR1C,QAAS0C,GACT3C,QAAS,WACP4C,IAA0B,EAC5B,EAAE,SAEDnG,GACC,gBAAKD,UAAU,qFAEf,8BACGyF,EAAY8B,KAAI,YAA0B,IAAvBC,EAAW,EAAXA,YAAatF,EAAE,EAAFA,GAC/B,OACE,iBAEElC,UAAU,yGAAwG,WAElH,iBAAKA,UAAU,mBAAkB,WAC/B,SAAC,IAAS,KACV,gBAAKA,UAAU,SAAQ,UACrB,gBAAIA,UAAU,kCAAiC,UAAC,UACtCwH,EAAY,aAI1B,iBAAKxH,UAAU,oCAAmC,WAChD,cAAGA,UAAU,OAAM,SAAC,yGAIpB,uBAAG,yEAKL,iBAAKA,UAAU,iDAAgD,WAC7D,SAAC,IAAM,CACLK,KAAK,SACLgB,KAAK,SACLtB,QAAS,WACPqG,IAA0B,EAC5B,EAAE,SACH,YAGD,SAAC,IAAM,CACL/F,KAAK,SACLgB,KAAK,SACLtB,SAAO,uBAAE,mFACY,OAAnBwF,GAAa,GAAM,SACbF,GAASoC,EAAAA,EAAAA,IAAcvF,IAAK,KAAD,kBAC3BmD,GAAS0B,EAAAA,EAAAA,OAAiB,KAAD,kBACzBxB,GAAa,GAAO,KAAD,kBACnBa,IAA0B,GAAO,KAAD,EAEtCY,GAAI,CACF3F,KAAM,UACNqG,QAAQ,UAAD,OAAYF,EAAW,iBAC9BG,SAAU,IACVC,SAAU,aACT,4CACH,SACH,gBAhDE1F,EAsDX,QAOP+D,KACC,SAAC,IAAS,CACRxC,QAASwC,GACTzC,QAAS,WACP0C,IAAmB,EACrB,EAAE,SAEDjG,GACC,gBAAKD,UAAU,qFAEf,gBAAKA,UAAU,kHAAiH,SAC7HyF,EAAY8B,KAAI,SAACM,GAChB,IAvHQP,EAuHAQ,EAAkCD,EAAlCC,QAASN,EAAyBK,EAAzBL,YAAaO,EAAYF,EAAZE,QACxBC,EAAmB,OAAPH,QAAO,IAAPA,OAAO,EAAPA,EAAS3F,GAC3B,OACE,4BACE,iBAAKlC,UAAU,6CAA4C,WACzD,iBAAKA,UAAU,6BAA4B,WACzC,gBAAKA,UAAU,yBAAwB,SAAC,UACxC,iBAAMA,UAAU,yHAAwH,SACrIgI,QAGL,iBACEhI,UAAU,yDACVD,QAAS,WACPmG,IAAmB,EACrB,EAAE,UAEF,gBACEtF,MAAM,6BACNC,KAAK,OACLC,QAAQ,YACRE,YAAY,MACZD,OAAO,eACPf,UAAU,UAAS,UAEnB,iBACEiB,cAAc,QACdC,eAAe,QACfC,EAAE,iCAKV,eAAInB,UAAU,kDAAiD,SAC5DwH,KAEH,iBAAKxH,UAAU,mCAAkC,WAC/C,iBAAKA,UAAU,eAAc,WAC3B,eAAIA,UAAU,+DAA8D,SAAC,gBAI7E,gBAAKA,UAAU,OAAM,UACnB,kBACEA,UAAU,yDACVqB,KAAK,OACLZ,YAAY,iBACZW,SAAU,SACR6G,GAEArC,GAAUqC,EAAEC,cAAcjG,MAC5B,OAIJ,gBAAKjC,UAAU,mHAAkH,UA9KjIsH,EA+KgBpC,EA9KzB,OAAJoC,QAAI,IAAJA,OAAI,EAAJA,EAAMf,QAAO,SAAC4B,GAAI,aAAc,QAAd,EAAKA,EAAKnG,YAAI,aAAT,EAAWoG,cAAcC,SAAS1C,GAAO,KA8K1B4B,KACrB,YAA+B,IAA5Be,EAAM,EAANA,OAAQtG,EAAI,EAAJA,KAAMuG,EAAM,EAANA,OACf,OACE,iBAEEvI,UAAU,+DAA8D,WAExE,iBAAKA,UAAU,4BAA2B,WACxC,SAAC,IAAM,CACLwI,KACE,gBACEA,IAAKF,EACLG,IAAG,UAAKzG,EAAI,gBAIlB,iBAAMhC,UAAU,gDAA+C,SAC5DgC,QAGL,mBACEjC,SAAO,uBAAE,sFACHgI,EAAQ7F,KAAO0E,GAAM1E,GAAE,gCACnBmD,GACJqD,EAAAA,EAAAA,IAAkB,CAChBV,UAAAA,EACAO,OAAAA,KAEF,KAAD,kBACKlD,GAAS0B,EAAAA,EAAAA,OAAiB,KAAD,kBACzBC,GAAI,CACR3F,KAAM,UACNqG,QAAQ,OAAD,OAAS1F,EAAI,iBACpB2F,SAAU,IACVC,SAAU,eACT,KAAD,yBAEF1B,IAAmB,GACnBc,GAAI,CACF3F,KAAM,UACNqG,QACE,kDACFC,SAAU,IACVC,SAAU,eACT,4CAGP5H,UAAU,oEAAmE,SAC9E,UA5CIuI,EAiDX,UAIN,iBAAKvI,UAAU,cAAa,WAC1B,eAAIA,UAAU,+DAA8D,SAAC,mBAI7E,gBAAKA,UAAU,sGAAqG,SACjH8H,EAAQP,KAAI,YAA+B,IAA5Be,EAAM,EAANA,OAAQtG,EAAI,EAAJA,KAAMuG,EAAM,EAANA,OAC5B,OACE,iBAEEvI,UAAU,gEAA+D,WAEzE,iBAAKA,UAAU,4BAA2B,WACxC,SAAC,IAAM,CACLwI,KACE,gBACEA,IAAKF,EACLG,IAAG,UAAKzG,EAAI,gBAIlB,iBAAMhC,UAAU,yBAAwB,SACrCgC,QAGL,mBACEjC,SAAO,uBAAE,sFACHgI,EAAQ7F,KAAO0E,GAAM1E,GAAE,gCACnBmD,GACJsD,EAAAA,EAAAA,IAAsB,CACpBX,UAAAA,EACAO,OAAAA,KAEF,KAAD,kBACKlD,GAAS0B,EAAAA,EAAAA,OAAiB,KAAD,kBACzBC,GAAI,CACR3F,KAAM,UACNqG,QAAQ,UAAD,OAAY1F,EAAI,iBACvB2F,SAAU,IACVC,SAAU,eACT,KAAD,yBAEF1B,IAAmB,GACnBc,GAAI,CACF3F,KAAM,UACNqG,QACE,qDACFC,SAAU,IACVC,SAAU,eACT,4CAGP5H,UAAU,iEAAgE,SAC3E,aA5CIuI,EAiDX,cAxKEP,EA8Kd,QAOPjC,IACCN,EAAY8B,KAAI,YAAqD,IAAlDrF,EAAE,EAAFA,GAAIsF,EAAW,EAAXA,YAAaoB,EAAY,EAAZA,aAAcC,EAAW,EAAXA,YAC5CzD,EAAQZ,UACVY,EAAQZ,QAAQsE,UAAYD,GAE9B,IAAME,EAAmC,CACvCvB,YAAAA,EACAqB,YAAAA,EACAG,WAAY9G,GAEd,OACE,SAAC,IAAS,CAERuB,QAASsC,GACTvC,QAAS,WACPwC,IAAiB,EACnB,EAAE,SAED/F,GACC,gBAAKD,UAAU,qFAEf,SAAC,KAAM,CACL+I,cAAeA,EACfE,iBAAkBC,EAAAA,KAAaC,MAAM,CACnC3B,YAAa0B,EAAAA,KAAaE,SAAS,MAErCC,SAAQ,yCAAE,WAAOC,EAAO,GAAD,sEACD,OADKC,EAAa,EAAbA,gBACX,GAAM,SACdlE,GAASmE,EAAAA,EAAAA,IAActH,EAAIoH,IAAS,KAAD,kBACnCjE,GAAS0B,EAAAA,EAAAA,OAAiB,KAAD,EAC/Bf,IAAiB,GAAO,2CACzB,qDALO,GAKN,SAED,YAAyD,IAAtDyD,EAAY,EAAZA,aAAcrH,EAAa,EAAbA,cAAekH,EAAM,EAANA,OAAQI,EAAS,EAATA,UAMvC,OACE,SAAC,KAAI,WACH,iBAAK1J,UAAU,+HAA8H,WAC3I,iBAAKA,UAAU,6CAA4C,WACzD,iBAAKA,UAAU,6BAA4B,WACzC,gBAAKA,UAAU,yBAAwB,SAAC,UACxC,iBAAMA,UAAU,yHAAwH,SACrIkC,QAGL,iBACElC,UAAU,yDACVD,QAAS,WACPiG,IAAiB,EACnB,EAAE,UAEF,gBACEpF,MAAM,6BACNC,KAAK,OACLC,QAAQ,YACRE,YAAY,MACZD,OAAO,eACPf,UAAU,UAAS,UAEnB,iBACEiB,cAAc,QACdC,eAAe,QACfC,EAAE,iCAKV,gBAAKnB,UAAU,sCAAqC,UAClD,iBAAKA,UAAU,cAAa,WAC1B,eAAIA,UAAU,kFAAiF,SAAC,iCAIhG,UAAC,IAAO,YACN,UAAC,IAAS,YACR,SAAC,IAAK,CAAC8C,QAAQ,cAAa,SAAC,kBAG7B,SAAC,IAAK,CACJZ,GAAG,cACHF,KAAK,cACLX,KAAK,OACLZ,YAAa+G,QAGjB,UAAC,IAAS,YACR,SAAC,IAAK,UAAC,wBACP,UAAC,IAAQ,YACP,SAAC,IAAM,CACL9G,QAASA,EACTF,KAAMA,EACNC,YAAamI,EACb7I,QAASyF,KAEX,SAAC,IAAI,CAAChF,KAAMA,EAAK,SACdyE,EAAgBsC,KACf,gBAAGrF,EAAE,EAAFA,GAAIyH,EAAmB,EAAnBA,oBAAmB,OACxB,SAAC,IAAM,CAEL5J,QAAS,kBArEJ,SAACmC,GAC5BkC,GAAQ,GACRhC,EAAc,aAAcF,EAC9B,CAmE0B0H,CAAqB1H,EAAG,EACzB,SAEAyH,GALIzH,EAME,gBAOrB,UAAC,IAAS,YACR,SAAC,IAAK,CACJnC,QAAS,WACP+F,IAAY,EACd,EAAE,SACH,kBAGAD,IACC,iCACE,SAAC,IAAQ,CACP9D,QAAQ,WACRC,KAAK,iBAEP,iBAAKhC,UAAU,wCAAuC,WACpD,SAAC,IAAM,CACLK,KAAK,SACLN,QAAS,WACP+F,IAAY,GACZ4D,GACF,EACArI,KAAK,SAAQ,SACd,YAGD,SAAC,IAAM,CACLhB,KAAK,UACLN,QAAS,WACP+F,IAAY,EACd,EACAzE,KAAK,SAAQ,SACd,gBAML,gBACErB,UAAU,iBACV6J,wBAAyB,CACvBC,OAAQR,EAAOT,aAEjB9I,QAAS,WACP+F,IAAY,EACd,QAIN,gBAAK9F,UAAU,oCAAmC,UAChD,SAAC,IAAM,CACLC,UAAWwJ,EACXpI,KAAK,SACLrB,UAAU,QACVK,KAAK,UAAS,SACf,sBASf,KAtKC6B,EA2KX,KACF,iBAAKlC,UAAU,2CAA0C,WACvD,iBAAKA,UAAU,qEAAoE,WACjF,gBAAKA,UAAU,iEAAgE,UAC7E,SAAC,IAAY,CACXoB,SAAU,SAAC6G,GACTrC,GAAUqC,EAAEC,cAAcjG,MAC5B,OAGJ,SAAC,IAAM,CACLZ,KAAK,SACLf,KAAK,eACLD,KAAK,YACLL,UAAU,4CAA2C,SACtD,sBAIAgF,GACD,iCACE,mBAAOhF,UAAU,gBAAe,WAC9B,4BACE,2BACE,wBAAI,QACJ,wBAAI,kBACJ,wBAAI,mBACJ,wBAAI,aACJ,wBAAI,aACJ,wBAAI,kBAGR,2BACmC,QApgBlBsH,GAogBMH,GADvB,EAlgBC,OAAJG,SAAI,IAAJA,QAAI,EAAJA,GAAMf,QAAO,SAAC4B,GAAI,aACP,QADO,EACvBA,EAAKX,mBAAW,aAAhB,EAAkBY,cAAcC,SAAS1C,GAAO,WAkgBL,aAAhC,EAAkC4B,KACjC,YAA0D,IAAvDO,EAAO,EAAPA,QAASC,EAAO,EAAPA,QAAS7F,EAAE,EAAFA,GAAIsF,EAAW,EAAXA,YAAaoB,EAAY,EAAZA,aAC9BmB,EACa,sBAAjBnB,EACI,eACiB,qCAAjBA,EACA,cACA,gBACAoB,EACa,sBAAjBpB,EACI,iBACiB,qCAAjBA,EACA,gBACA,kBACN,OACE,2BACE,wBAAK1G,KACL,yBACE,SAAC,KAAI,CACH3B,GAAE,0BAAqB2B,GACvBlC,UAAU,yDAAwD,SAEjEwH,OAGL,yBACE,iBACExH,UAAS,qDAAgD+J,EAAO,YAAIC,GAAY,SAE/EpB,OAGL,eAAI5I,UAAU,WAAU,SAAE+H,EAAQ/F,QAClC,yBACE,iBAAKhC,UAAU,4BAA2B,WACxC,SAAC,UAAY,CACXiK,SAAU,EACVC,SAAU,CACRC,MAAO,UACPC,gBAAiB,WACjB,SAEDtC,EAAQP,KAAI,gBAAGvF,EAAI,EAAJA,KAAMsG,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAM,OAClC,SAAC,IAAO,CAEN8B,MAAOrI,EACPsI,UAAU,MAAK,UAEf,SAAC,IAAM,CACL9B,KACE,gBACEA,IAAKF,EACLG,IAAG,UAAKzG,EAAI,gBARbuG,EAYG,OAGd,iBACExI,QAAS,WACP0G,GAAwBvE,EAC1B,EACAlC,UAAU,6LAA4L,UAEtM,gBACEY,MAAM,6BACNC,KAAK,OACLC,QAAQ,YACRE,YAAY,MACZD,OAAO,eACPf,UAAU,UAAS,UAEnB,iBACEiB,cAAc,QACdC,eAAe,QACfC,EAAE,qCAMZ,yBACE,iBAAKnB,UAAU,mCAAkC,WAC/C,iBACED,QAAS,WACPsG,GAAkBnE,EACpB,EAAE,UAEF,SAAC,IAAQ,OAEX,iBACEnC,QAAS,WACP4G,GAA+BzE,EACjC,EAAE,UAEF,SAAC,IAAU,aAjFVA,EAuFb,UAIN,gBAAKlC,UAAU,qCAAoC,UACjD,SAAC,IAAU,CACTuK,kBAAgB,EAChBC,eAAgB,EAChBpJ,SA7lBG,SAACqJ,GAChBvD,GAAWuD,GAEXrD,GAAyB,OAAVpC,QAAU,IAAVA,OAAU,EAAVA,EAAYqC,MAAmB,GAAZoD,EAAO,GAAqB,GAAZA,EAAO,GAAS,GACpE,EA0lBcjG,QAASA,GACTkG,SAAU,EACVC,MAAO3F,EAAW4F,OAClB5K,UAAU,oBAKhB,gBAAKA,UAAU,qDAAoD,UACjE,iBAAKA,UAAU,iDAAgD,WAC7D,gBAAKA,UAAU,kDACf,gBAAKA,UAAU,oDACf,gBAAKA,UAAU,8DAO7B,C","sources":["components/Button/Button.tsx","components/Dropdown/Dropdow.tsx","components/Dropdown/List.tsx","components/Dropdown/Option.tsx","components/Dropdown/Select.tsx","components/HeaderSearch/HeaderSearch.tsx","components/Input/Input.tsx","components/Input/TextTiny.tsx","components/Label/Label.tsx","components/Portal/Portal.tsx","components/Modal/ModalBase.tsx","components/common/ErrorComponent/ErrorComponent.tsx","components/common/FormGroup/FormGroup.tsx","components/common/FormRow/FormRow.tsx","components/icons/IconDelete.tsx","components/icons/IconEdit.tsx","components/icons/IconError.tsx","hooks/useClickOutside.tsx","pages/Home/Project.tsx"],"sourcesContent":["import { type } from \"os\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\ntype Props = {\r\n  children: JSX.Element | React.ReactNode;\r\n  type: string | any;\r\n  className?: string;\r\n  isLoading?: boolean;\r\n  href?: string;\r\n  kind?: string;\r\n  onClick?: any;\r\n};\r\n\r\nconst Button = ({\r\n  children,\r\n  onClick,\r\n  className = \"\",\r\n  isLoading = false,\r\n  ...rest\r\n}: Props) => {\r\n  const child = !!isLoading ? (\r\n    <div className=\"w-8 h-8 rounded-full border-4 border-white border-t-transparent border-b-transparent animate-spin\"></div>\r\n  ) : (\r\n    children\r\n  );\r\n\r\n  let defaultClassName =\r\n    \"text-base font-semibold rounded-xl flex items-center justify-center\";\r\n\r\n  switch (rest.kind) {\r\n    case \"primary\":\r\n      defaultClassName =\r\n        defaultClassName +\r\n        \" bg-gradient-to-r from-[#00a7b4] to-[#a4d96c] text-white p-4 min-h-[56px]\";\r\n      break;\r\n\r\n    case \"secondary\":\r\n      defaultClassName =\r\n        defaultClassName +\r\n        \" bg-secondary bg-opacity-20 text-secondary p-4 min-h-[56px]\";\r\n      break;\r\n\r\n    case \"cancel\":\r\n      defaultClassName =\r\n        defaultClassName +\r\n        \" bg-stock hover:bg-gray-100 transition-all text-text3 text-base font-medium font-mono px-4 py-2 rounded-lg\";\r\n      break;\r\n\r\n    case \"success\":\r\n      defaultClassName =\r\n        defaultClassName +\r\n        \" bg-blue-500 hover:bg-opacity-80  text-white px-4 py-2 font-mono\";\r\n      break;\r\n\r\n    case \"delete\":\r\n      defaultClassName =\r\n        defaultClassName +\r\n        \" bg-red-500 hover:bg-opacity-80 text-white px-4 py-2 font-mono\";\r\n      break;\r\n\r\n    default:\r\n      break;\r\n  }\r\n  if (rest.href)\r\n    return (\r\n      <Link to={rest.href} className={defaultClassName + \" \" + className}>\r\n        {children}\r\n      </Link>\r\n    );\r\n  return (\r\n    <button\r\n      onClick={onClick}\r\n      className={`cursor-pointer ${\r\n        defaultClassName +\r\n        \" \" +\r\n        (!!isLoading ? \"opacity-50 pointer-events-none\" : \"\")\r\n      } ${className}`}\r\n      {...rest}\r\n    >\r\n      {child}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport { AddUserType } from \"../../types/global\";\r\nexport type Props = {\r\n  children?: JSX.Element | React.ReactNode;\r\n  placeholder?: string;\r\n  className?: string;\r\n  show?: boolean;\r\n  onClick?: () => void;\r\n  dataDel?: () => void;\r\n  removeUser?: any;\r\n  clearListUser?: any;\r\n  nodeRef?: any;\r\n  data?: AddUserType[];\r\n\r\n  searchFilter?: (e: React.FormEvent<HTMLInputElement>) => void;\r\n};\r\nconst Dropdown = ({ children }: Props) => {\r\n  return <div className=\"relative \">{children}</div>;\r\n};\r\n\r\nexport default Dropdown;\r\n","import React from \"react\";\r\nimport { Props } from \"./Dropdow\";\r\n\r\nconst List = ({ children, show, className }: Props) => {\r\n  return (\r\n    <>\r\n      {show && (\r\n        <div\r\n          className={`absolute top-full left-0 w-full bg-white shadow-lg rounded-lg overflow-hidden z-10 ${className}`}\r\n        >\r\n          {children}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React from \"react\";\r\nimport { Props } from \"./Dropdow\";\r\n\r\nconst Option = ({ children, onClick, className = \" \" }: Props) => {\r\n  return (\r\n    <div\r\n      className={`py-4 px-5 cursor-pointer flex items-center justify-between transition-all ease-linear text-sm hover:text-[#42526e]  hover:bg-[rgba(9,30,66,0.04)] hover:border-l-4 hover:border-l-primary hover:bg-opacity-20 ${className}`}\r\n      onClick={onClick}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Option;\r\n","import React from \"react\";\r\nimport { Props } from \"./Dropdow\";\r\n\r\nconst Select = ({\r\n  show,\r\n  onClick,\r\n  placeholder = \"\",\r\n  className = \" text-text2 bg-bgInput\",\r\n  nodeRef,\r\n}: Props) => {\r\n  return (\r\n    <div\r\n      ref={nodeRef}\r\n      className={`flex items-center justify-between px-6 py-4  border border-strock rounded-xl text-sm font-semibold cursor-pointer select-none ${className}`}\r\n      onClick={onClick}\r\n    >\r\n      <span>{placeholder}</span>\r\n      <span>\r\n        {show ? (\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            className=\"h-4 w-4\"\r\n            fill=\"none\"\r\n            viewBox=\"0 0 24 24\"\r\n            stroke=\"currentColor\"\r\n            strokeWidth=\"2\"\r\n          >\r\n            <path\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              d=\"M5 15l7-7 7 7\"\r\n            />\r\n          </svg>\r\n        ) : (\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            className=\"h-4 w-4\"\r\n            fill=\"none\"\r\n            viewBox=\"0 0 24 24\"\r\n            stroke=\"currentColor\"\r\n            strokeWidth=\"2\"\r\n          >\r\n            <path\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              d=\"M19 9l-7 7-7-7\"\r\n            />\r\n          </svg>\r\n        )}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Select;\r\n","import React from \"react\";\r\n\r\ntype Props = {\r\n  onChange?: any;\r\n};\r\n\r\nconst HeaderSearch = ({ onChange }: Props) => {\r\n  return (\r\n    <div className=\"bg-gray-100 rounded-full shadow-[10px_10px_20px_rgba(218,_213,_213,_0.15)] p-2 w-full  flex items-center\">\r\n      <div className=\"flex-1 px-5\">\r\n        <input\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          placeholder=\"Search...\"\r\n          className=\"bg-transparent w-full text-sm text-text1 placeholder:text-text4 \"\r\n        />\r\n      </div>\r\n      <div className=\"w-[72px] rounded-full bg-secondary bg-opacity-20 text-secondary h-10 flex items-center justify-center flex-shrink-0\">\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          fill=\"none\"\r\n          viewBox=\"0 0 24 24\"\r\n          strokeWidth=\"1.5\"\r\n          stroke=\"currentColor\"\r\n          className=\"w-6 h-6\"\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            d=\"M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z\"\r\n          />\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HeaderSearch;\r\n","import React from \"react\";\r\nimport { useField } from \"formik\";\r\nimport { withErrorBoundary } from \"react-error-boundary\";\r\nimport ErrorComponent from \"../common/ErrorComponent/ErrorComponent\";\r\nimport { propsInput } from \"../../types/global\";\r\n\r\nconst Input = ({\r\n  children,\r\n  className = \"bg-bgInput\",\r\n  ...props\r\n}: propsInput) => {\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <div className=\"relative \">\r\n      <input\r\n        className={`w-full px-6 py-4 border  rounded-xl text-sm font-medium placeholder:text-text4 dark:placeholder:text-text-2 ${className} ${\r\n          meta.touched && meta.error\r\n            ? \"border-error text-error\"\r\n            : \"border-strock text-text1 dark:border-darkStoke\"\r\n        } ${children ? \"pr-14\" : \"\"}`}\r\n        {...props}\r\n        {...field}\r\n      />\r\n      {meta.touched && meta.error ? (\r\n        <span className=\"absolute bottom-0 left-1 translate-y-6 text-sm text-error font-medium pointer-events-none error-input\">\r\n          {meta.error}\r\n        </span>\r\n      ) : null}\r\n      {children && (\r\n        <span className=\" absolute right-6 top-2/4 -translate-y-2/4 cursor-pointer select-none\">\r\n          {children}\r\n        </span>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withErrorBoundary(Input, {\r\n  FallbackComponent: ErrorComponent,\r\n});\r\n","import React from \"react\";\r\nimport { Editor } from \"@tinymce/tinymce-react\";\r\nimport { Field } from \"formik\";\r\n\r\ntype Props = {\r\n  control: string;\r\n  name: string;\r\n  value?: string;\r\n};\r\n\r\nconst TextTiny = ({ control, name, value, ...props }: Props) => {\r\n  switch (control) {\r\n    case \"tiny-mce\":\r\n      return (\r\n        <>\r\n          <Field id={name} name={name} {...props}>\r\n            {({ form, field }: any) => {\r\n              const { setFieldValue } = form;\r\n\r\n              return (\r\n                <>\r\n                  <Editor\r\n                    value={field.value}\r\n                    initialValue={value}\r\n                    init={{\r\n                      height: 500,\r\n                      menubar: true,\r\n                      toolbar:\r\n                        \"undo redo | formatselect | \" +\r\n                        \"bold italic backcolor | alignleft aligncenter \" +\r\n                        \"alignright alignjustify | bullist numlist outdent indent | \" +\r\n                        \"removeformat | help\",\r\n                      content_style:\r\n                        \"body { font-family:Helvetica,Arial,sans-serif; font-size:14px }\",\r\n                    }}\r\n                    onEditorChange={(content, editor) => {\r\n                      setFieldValue(name, content);\r\n                    }}\r\n                  />\r\n                </>\r\n              );\r\n            }}\r\n          </Field>\r\n        </>\r\n      );\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nexport default TextTiny;\r\n","import React from \"react\";\r\n\r\ntype Props = {\r\n  children: JSX.Element | React.ReactNode;\r\n  htmlFor?: string;\r\n  onClick?: any;\r\n};\r\n\r\nconst Label = (props: Props) => {\r\n  const { children, htmlFor = \"\", onClick } = props;\r\n  return (\r\n    <label\r\n      onClick={onClick}\r\n      htmlFor={htmlFor}\r\n      className=\"text-sm text-left font-medium  text-text2 dark:text-text3 cursor-pointer inline-block mt-5\"\r\n    >\r\n      {children}\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Label;\r\n","import React, { useEffect } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport { portalType } from \"../../types/global\";\r\n\r\nfunction createPortalWrapper() {\r\n  const element = document.createElement(\"div\");\r\n  element.id = \"portal-wrapper\";\r\n  return element;\r\n}\r\n\r\nconst portalWrapperElm = createPortalWrapper();\r\n\r\nconst Portal = ({\r\n  containerClassName = \"\",\r\n  bodyClassName = \"\",\r\n  containerStyle = {},\r\n  bodyStyle = {},\r\n  onClose,\r\n  visible = false,\r\n  children,\r\n}: portalType) => {\r\n  useEffect(() => {\r\n    document.body.appendChild(portalWrapperElm);\r\n  }, []);\r\n\r\n  const renderContent = (\r\n    <div\r\n      className={`fixed inset-0 z-[99]  ${\r\n        visible ? \"\" : \"opacity-0 invisible\"\r\n      } ${containerClassName}`}\r\n      style={containerStyle}\r\n    >\r\n      <div\r\n        className=\"overlay absolute inset-0 bg-black bg-opacity-30 \"\r\n        onClick={onClose}\r\n      ></div>\r\n      <div\r\n        className={`content relative z-10 ${bodyClassName}`}\r\n        style={bodyStyle}\r\n      >\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n  return createPortal(renderContent, portalWrapperElm);\r\n};\r\n\r\nexport default Portal;\r\n","import React from \"react\";\r\nimport { portalType } from \"../../types/global\";\r\nimport Portal from \"../Portal/Portal\";\r\n\r\nconst ModalBase = ({ visible, children, onClose }: portalType) => {\r\n  return (\r\n    <>\r\n      <Portal\r\n        visible={visible}\r\n        onClose={onClose}\r\n        containerClassName=\"flex items-center justify-center\"\r\n      >\r\n        {children}\r\n      </Portal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ModalBase;\r\n","import React from \"react\";\r\n\r\ntype Props = {};\r\n\r\nconst ErrorComponent = (props: Props) => {\r\n  return (\r\n    <div className=\"text-red-500 bg-red-100 p-5 rounded-lg\">\r\n      Look like component is error\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorComponent;\r\n","import React from \"react\";\r\n\r\ntype Props = {\r\n  children: JSX.Element | React.ReactNode;\r\n};\r\n\r\nconst FormGroup = ({ children }: Props) => {\r\n  return (\r\n    <div className=\"flex flex-col gap-y-2 lg:gap-y-3 mb-4 lg:mb-5\">\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormGroup;\r\n","import React from \"react\";\r\n\r\ntype Props = {\r\n  children: JSX.Element | React.ReactNode;\r\n  className?: string;\r\n};\r\n\r\nconst FormRow = ({ children, className = \"grid-cols-2\" }: Props) => {\r\n  return (\r\n    <div className={`grid gap-x-[45px] mb-1 ${className}`}>{children}</div>\r\n  );\r\n};\r\n\r\nexport default FormRow;\r\n","import React from \"react\";\r\n\r\ntype Props = {\r\n  onClick?: any;\r\n};\r\n\r\nconst IconDelete = ({ onClick = () => {} }: Props) => {\r\n  return (\r\n    <span\r\n      className=\"flex items-center justify-center w-10 h-10 borderborder-transparent rounded cursor-pointer text-error hover:bg-error hover:bg-opacity-20 transition-all ease-linear\"\r\n      onClick={onClick}\r\n    >\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        className=\"w-5 h-5\"\r\n        fill=\"none\"\r\n        viewBox=\"0 0 24 24\"\r\n        stroke=\"currentColor\"\r\n        strokeWidth=\"2\"\r\n      >\r\n        <path\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\"\r\n        />\r\n      </svg>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default IconDelete;\r\n","import React from \"react\";\r\n\r\ntype Props = {\r\n  onClick?: any;\r\n};\r\n\r\nconst IconEdit = ({ onClick = () => {} }: Props) => {\r\n  return (\r\n    <span\r\n      className=\"flex items-center justify-center w-10 h-10 border border-transparent text-blue-600 hover:bg-blue-200 transition-all ease-linear rounded cursor-pointer select-none\"\r\n      onClick={onClick()}\r\n    >\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        className=\"w-5 h-5\"\r\n        fill=\"none\"\r\n        viewBox=\"0 0 24 24\"\r\n        stroke=\"currentColor\"\r\n        strokeWidth=\"2\"\r\n      >\r\n        <path\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\"\r\n        />\r\n      </svg>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default IconEdit;\r\n","import React from \"react\";\r\n\r\nconst IconError = () => {\r\n  return (\r\n    <span className=\"text-red-500\">\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        viewBox=\"0 0 24 24\"\r\n        fill=\"currentColor\"\r\n        className=\"w-6 h-6\"\r\n      >\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          d=\"M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12zM12 8.25a.75.75 0 01.75.75v3.75a.75.75 0 01-1.5 0V9a.75.75 0 01.75-.75zm0 8.25a.75.75 0 100-1.5.75.75 0 000 1.5z\"\r\n          clipRule=\"evenodd\"\r\n        />\r\n      </svg>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default IconError;\r\n","import { useState, useRef, useEffect } from \"react\";\r\nexport default function useClickOutside() {\r\n  const [show, setShow] = useState<boolean>(false);\r\n  const nodeRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    function handleOutside(this: Document, ev: MouseEvent) {\r\n      if (nodeRef.current && !nodeRef.current.contains(ev.target as Node)) {\r\n        setShow(false);\r\n      }\r\n    }\r\n\r\n    document.addEventListener(\"click\", handleOutside);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"click\", handleOutside);\r\n    };\r\n  }, []);\r\n\r\n  return { show, setShow, nodeRef };\r\n}\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Form, Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { DispathType, RootState } from \"../../redux/config\";\r\nimport IconDelete from \"../../components/icons/IconDelete\";\r\nimport IconEdit from \"../../components/icons/IconEdit\";\r\nimport { Avatar, Pagination, Tooltip } from \"antd\";\r\nimport Button from \"../../components/Button/Button\";\r\nimport HeaderSearch from \"../../components/HeaderSearch/HeaderSearch\";\r\nimport ModalBase from \"../../components/Modal/ModalBase\";\r\nimport FormGroup from \"../../components/common/FormGroup/FormGroup\";\r\nimport TextTiny from \"../../components/Input/TextTiny\";\r\nimport Option from \"../../components/Dropdown/Option\";\r\nimport List from \"../../components/Dropdown/List\";\r\nimport Dropdown from \"../../components/Dropdown/Dropdow\";\r\nimport Label from \"../../components/Label/Label\";\r\nimport Select from \"../../components/Dropdown/Select\";\r\nimport FormRow from \"../../components/common/FormRow/FormRow\";\r\nimport Input from \"../../components/Input/Input\";\r\nimport useClickOutside from \"../../hooks/useClickOutside\";\r\nimport { useToast } from \"../../components/Toast\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  assignUserProject,\r\n  deleteProject,\r\n  getProjectApi,\r\n  getProjectCategoryApi,\r\n  removeUserFromProject,\r\n  updateProject,\r\n} from \"../../redux/projectReducer/projectReducer\";\r\nimport { getUserApi } from \"../../redux/userReducer/userReducer\";\r\nimport { ProjectType, ProjectUpdateType, UserModel } from \"../../types/global\";\r\nimport IconError from \"../../components/icons/IconError\";\r\nimport { getStoreJson, USER_LOGIN } from \"../../util/setting\";\r\nimport { Link } from \"react-router-dom\";\r\ntype Props = {};\r\n\r\nconst Project = (props: Props) => {\r\n  // lấy data từ redux\r\n  const { projectAll, projectCategory } = useSelector(\r\n    (state: RootState) => state.projectReducer\r\n  );\r\n\r\n  const { userAll } = useSelector((state: RootState) => state.userReducer);\r\n\r\n  const descRef = useRef<HTMLDivElement>(null);\r\n  const dispatch: DispathType = useDispatch();\r\n\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const { show, setShow, nodeRef } = useClickOutside();\r\n  const handleToggleDropdown = () => {\r\n    setShow(!show);\r\n  };\r\n\r\n  const [projectList, setProjectList] = useState<ProjectType[]>([]);\r\n\r\n  const [search, setSearch] = useState<string>(\"\");\r\n  const [openDesc, setOpenDesc] = useState<boolean>(false);\r\n  const [openModalBase, setOpenModalBase] = useState<boolean>(false);\r\n  const [openModalMember, setOpenModalMember] = useState<boolean>(false);\r\n  const [openModalDeleteProject, setOpenModalDeleteProject] =\r\n    useState<boolean>(false);\r\n\r\n  const handleToggleModal = async (id: number) => {\r\n    setOpenDesc(false);\r\n    setIsLoading(true);\r\n    setOpenModalBase(true);\r\n\r\n    await dispatch(getProjectCategoryApi());\r\n    setProjectList(projectAll.filter((u) => u.id === id));\r\n\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const handleToggleModalMember = async (id: number) => {\r\n    setIsLoading(true);\r\n    setOpenModalMember(true);\r\n    await dispatch(getUserApi());\r\n    setProjectList(projectAll.filter((u) => u.id === id));\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const handleToggleModalDeteleProject = async (id: number) => {\r\n    setIsLoading(true);\r\n    setOpenModalDeleteProject(true);\r\n    setProjectList(projectAll.filter((u) => u.id === id));\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const searchFilter = (data: UserModel[]) => {\r\n    return data?.filter((item) => item.name?.toLowerCase().includes(search));\r\n  };\r\n  const searchFilterProject = (data: ProjectType[]) => {\r\n    return data?.filter((item) =>\r\n      item.projectName?.toLowerCase().includes(search)\r\n    );\r\n  };\r\n\r\n  // Admin\r\n  const admin = getStoreJson(USER_LOGIN);\r\n\r\n  useEffect(() => {\r\n    dispatch(getProjectApi());\r\n  }, []);\r\n\r\n  const { add } = useToast();\r\n  // phân trang\r\n  const [current, setCurrent] = useState(1);\r\n  const [listProject, setListProject] = useState<ProjectType[]>([]);\r\n  useEffect(() => {\r\n    setListProject(projectAll ? projectAll?.slice(0, 6) : []);\r\n  }, [projectAll]);\r\n\r\n  const onChange = (page: number) => {\r\n    setCurrent(page);\r\n\r\n    setListProject(projectAll?.slice((page - 1) * 6, (page - 1) * 6 + 6));\r\n  };\r\n  return (\r\n    <>\r\n      {/* Modal delete project */}\r\n      {openModalDeleteProject && (\r\n        <ModalBase\r\n          visible={openModalDeleteProject}\r\n          onClose={() => {\r\n            setOpenModalDeleteProject(false);\r\n          }}\r\n        >\r\n          {isLoading ? (\r\n            <div className=\"w-8 h-8 rounded-full border-4 border-blue-300 border-t-transparent animate-spin\"></div>\r\n          ) : (\r\n            <>\r\n              {projectList.map(({ projectName, id }) => {\r\n                return (\r\n                  <div\r\n                    key={id}\r\n                    className=\"relative bg-white max-w-[500px] w-[400px] max-h-[350px]  overflow-hidden rounded-lg shadow-sdSecondary\"\r\n                  >\r\n                    <div className=\"flex gap-x-2 p-6\">\r\n                      <IconError />\r\n                      <div className=\"flex-1\">\r\n                        <h3 className=\"text-xl font-mono font-semibold\">\r\n                          Delete {projectName}?\r\n                        </h3>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"text-sm text-text2 leading-6 px-6\">\r\n                      <p className=\"mb-3\">\r\n                        You're about to permanently delete this project, its\r\n                        comments and attachments, and all of its data.\r\n                      </p>\r\n                      <p>\r\n                        If you're not sure, you can resolve or close this issue\r\n                        instead.\r\n                      </p>\r\n                    </div>\r\n                    <div className=\"flex items-start justify-end gap-x-3 px-6 py-5\">\r\n                      <Button\r\n                        kind=\"cancel\"\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                          setOpenModalDeleteProject(false);\r\n                        }}\r\n                      >\r\n                        Cancel\r\n                      </Button>\r\n                      <Button\r\n                        kind=\"delete\"\r\n                        type=\"button\"\r\n                        onClick={async () => {\r\n                          setIsLoading(true);\r\n                          await dispatch(deleteProject(id));\r\n                          await dispatch(getProjectApi());\r\n                          await setIsLoading(false);\r\n                          await setOpenModalDeleteProject(false);\r\n\r\n                          add({\r\n                            type: \"success\",\r\n                            message: `Delete ${projectName} successfully`,\r\n                            duration: 3000,\r\n                            position: \"topRight\",\r\n                          });\r\n                        }}\r\n                      >\r\n                        Delete\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </>\r\n          )}\r\n        </ModalBase>\r\n      )}\r\n\r\n      {/* Modal add member */}\r\n      {openModalMember && (\r\n        <ModalBase\r\n          visible={openModalMember}\r\n          onClose={() => {\r\n            setOpenModalMember(false);\r\n          }}\r\n        >\r\n          {isLoading ? (\r\n            <div className=\"w-8 h-8 rounded-full border-4 border-blue-300 border-t-transparent animate-spin\"></div>\r\n          ) : (\r\n            <div className=\"relative bg-white max-w-[750px] w-[750px] max-h-[650px] h-[650px] overflow-hidden rounded-lg shadow-sdSecondary\">\r\n              {projectList.map((project) => {\r\n                const { members, projectName, creator } = project;\r\n                const projectId = project?.id;\r\n                return (\r\n                  <div key={projectId}>\r\n                    <div className=\"flex items-start justify-between mx-5 mt-5\">\r\n                      <div className=\" flex items-center gap-x-3\">\r\n                        <div className=\"text-text2 font-medium\">ID :</div>\r\n                        <span className=\"flex items-center justify-center min-w-[45px] h-[45px] rounded-lg shadow-sdThirty text-text2 font-semibold select-none\">\r\n                          {projectId}\r\n                        </span>\r\n                      </div>\r\n                      <span\r\n                        className=\"text-text2 hover:text-error select-none cursor-pointer\"\r\n                        onClick={() => {\r\n                          setOpenModalMember(false);\r\n                        }}\r\n                      >\r\n                        <svg\r\n                          xmlns=\"http://www.w3.org/2000/svg\"\r\n                          fill=\"none\"\r\n                          viewBox=\"0 0 24 24\"\r\n                          strokeWidth=\"1.5\"\r\n                          stroke=\"currentColor\"\r\n                          className=\"w-6 h-6\"\r\n                        >\r\n                          <path\r\n                            strokeLinecap=\"round\"\r\n                            strokeLinejoin=\"round\"\r\n                            d=\"M6 18L18 6M6 6l12 12\"\r\n                          />\r\n                        </svg>\r\n                      </span>\r\n                    </div>\r\n                    <h2 className=\"mt-5 text-2xl text-center text-text5 font-bold \">\r\n                      {projectName}\r\n                    </h2>\r\n                    <div className=\"flex items-start justify-between\">\r\n                      <div className=\"w-[55%] p-4 \">\r\n                        <h3 className=\"text-text5 text-2xl font-mono font-semibold py-2 text-center\">\r\n                          Add member\r\n                        </h3>\r\n\r\n                        <div className=\"mt-3\">\r\n                          <input\r\n                            className=\"p-4 outline-none w-full border border-gray-200 rounded\"\r\n                            type=\"text\"\r\n                            placeholder=\"Search user...\"\r\n                            onChange={(\r\n                              e: React.FormEvent<HTMLInputElement>\r\n                            ) => {\r\n                              setSearch(e.currentTarget.value);\r\n                            }}\r\n                          />\r\n                        </div>\r\n\r\n                        <div className=\"overflow-x-hidden overflow-y-auto max-h-[400px] mx-w-[600px] scrollbar-none border border-strock mt-3 rounded-lg\">\r\n                          {searchFilter(userAll).map(\r\n                            ({ avatar, name, userId }) => {\r\n                              return (\r\n                                <div\r\n                                  key={userId}\r\n                                  className=\"flex items-center justify-between p-4 border-b border-strock\"\r\n                                >\r\n                                  <div className=\"flex items-center gap-x-2\">\r\n                                    <Avatar\r\n                                      src={\r\n                                        <img\r\n                                          src={avatar}\r\n                                          alt={`${name} avatar`}\r\n                                        />\r\n                                      }\r\n                                    />\r\n                                    <span className=\"text-text1 max-w-[250px] font-medium truncate\">\r\n                                      {name}\r\n                                    </span>\r\n                                  </div>\r\n                                  <button\r\n                                    onClick={async () => {\r\n                                      if (creator.id === admin.id) {\r\n                                        await dispatch(\r\n                                          assignUserProject({\r\n                                            projectId,\r\n                                            userId,\r\n                                          })\r\n                                        );\r\n                                        await dispatch(getProjectApi());\r\n                                        await add({\r\n                                          type: \"success\",\r\n                                          message: `Add ${name} successfully`,\r\n                                          duration: 3000,\r\n                                          position: \"bottomLeft\",\r\n                                        });\r\n                                      } else {\r\n                                        setOpenModalMember(false);\r\n                                        add({\r\n                                          type: \"warning\",\r\n                                          message:\r\n                                            \"Only the creator can add member in this project\",\r\n                                          duration: 3000,\r\n                                          position: \"bottomLeft\",\r\n                                        });\r\n                                      }\r\n                                    }}\r\n                                    className=\"text-white font-medium font-mono bg-blue-500 px-2 py-1 rounded-lg\"\r\n                                  >\r\n                                    Add\r\n                                  </button>\r\n                                </div>\r\n                              );\r\n                            }\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"w-[45%] p-4\">\r\n                        <h3 className=\"text-text5 text-2xl font-mono font-semibold py-2 text-center\">\r\n                          Remove member\r\n                        </h3>\r\n\r\n                        <div className=\"overflow-x-hidden overflow-y-auto border border-strock mt-3 rounded-lg max-h-[470px] scrollbar-none\">\r\n                          {members.map(({ avatar, name, userId }) => {\r\n                            return (\r\n                              <div\r\n                                key={userId}\r\n                                className=\"flex items-center justify-between p-4 border-b border-strock \"\r\n                              >\r\n                                <div className=\"flex items-center gap-x-2\">\r\n                                  <Avatar\r\n                                    src={\r\n                                      <img\r\n                                        src={avatar}\r\n                                        alt={`${name} avatar`}\r\n                                      />\r\n                                    }\r\n                                  />\r\n                                  <span className=\"text-text1 font-medium\">\r\n                                    {name}\r\n                                  </span>\r\n                                </div>\r\n                                <button\r\n                                  onClick={async () => {\r\n                                    if (creator.id === admin.id) {\r\n                                      await dispatch(\r\n                                        removeUserFromProject({\r\n                                          projectId,\r\n                                          userId,\r\n                                        })\r\n                                      );\r\n                                      await dispatch(getProjectApi());\r\n                                      await add({\r\n                                        type: \"success\",\r\n                                        message: `Delete ${name} successfully`,\r\n                                        duration: 3000,\r\n                                        position: \"bottomLeft\",\r\n                                      });\r\n                                    } else {\r\n                                      setOpenModalMember(false);\r\n                                      add({\r\n                                        type: \"warning\",\r\n                                        message:\r\n                                          \"Only the creator can delete member in this project\",\r\n                                        duration: 3000,\r\n                                        position: \"bottomLeft\",\r\n                                      });\r\n                                    }\r\n                                  }}\r\n                                  className=\"text-white font-medium font-mono bg-error px-2 py-1 rounded-lg\"\r\n                                >\r\n                                  Remove\r\n                                </button>\r\n                              </div>\r\n                            );\r\n                          })}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          )}\r\n        </ModalBase>\r\n      )}\r\n\r\n      {/* Modal update project */}\r\n      {openModalBase &&\r\n        projectList.map(({ id, projectName, categoryName, description }) => {\r\n          if (descRef.current) {\r\n            descRef.current.innerHTML = description;\r\n          }\r\n          const initialValues: ProjectUpdateType = {\r\n            projectName,\r\n            description,\r\n            categoryId: id,\r\n          };\r\n          return (\r\n            <ModalBase\r\n              key={id}\r\n              visible={openModalBase}\r\n              onClose={() => {\r\n                setOpenModalBase(false);\r\n              }}\r\n            >\r\n              {isLoading ? (\r\n                <div className=\"w-8 h-8 rounded-full border-4 border-blue-300 border-t-transparent animate-spin\"></div>\r\n              ) : (\r\n                <Formik\r\n                  initialValues={initialValues}\r\n                  validationSchema={Yup.object().shape({\r\n                    projectName: Yup.string().required(\"\"),\r\n                  })}\r\n                  onSubmit={async (values, { setSubmitting }) => {\r\n                    setSubmitting(true);\r\n                    await dispatch(updateProject(id, values));\r\n                    await dispatch(getProjectApi());\r\n                    setOpenModalBase(false);\r\n                  }}\r\n                >\r\n                  {({ isSubmitting, setFieldValue, values, resetForm }) => {\r\n                    const handleSelectCategory = (id: number) => {\r\n                      setShow(false);\r\n                      setFieldValue(\"categoryId\", id);\r\n                    };\r\n\r\n                    return (\r\n                      <Form>\r\n                        <div className=\"relative bg-white min-w-[750px] max-h-[650px] overflow-x-hidden overflow-y-auto rounded-lg shadow-sdSecondary scrollbar-none\">\r\n                          <div className=\"flex items-start justify-between mx-5 mt-5\">\r\n                            <div className=\" flex items-center gap-x-3\">\r\n                              <div className=\"text-text2 font-medium\">ID :</div>\r\n                              <span className=\"flex items-center justify-center min-w-[45px] h-[45px] rounded-lg shadow-sdThirty text-text2 font-semibold select-none\">\r\n                                {id}\r\n                              </span>\r\n                            </div>\r\n                            <span\r\n                              className=\"text-text2 hover:text-error select-none cursor-pointer\"\r\n                              onClick={() => {\r\n                                setOpenModalBase(false);\r\n                              }}\r\n                            >\r\n                              <svg\r\n                                xmlns=\"http://www.w3.org/2000/svg\"\r\n                                fill=\"none\"\r\n                                viewBox=\"0 0 24 24\"\r\n                                strokeWidth=\"1.5\"\r\n                                stroke=\"currentColor\"\r\n                                className=\"w-6 h-6\"\r\n                              >\r\n                                <path\r\n                                  strokeLinecap=\"round\"\r\n                                  strokeLinejoin=\"round\"\r\n                                  d=\"M6 18L18 6M6 6l12 12\"\r\n                                />\r\n                              </svg>\r\n                            </span>\r\n                          </div>\r\n                          <div className=\"bg-white rounded-xl py-10 px-[66px]\">\r\n                            <div className=\"text-center\">\r\n                              <h1 className=\"py-4 px-14  bg-text4 bg-opacity-5 rounded-xl font-bold text-[25px] inline-block\">\r\n                                Update Project 📝\r\n                              </h1>\r\n\r\n                              <FormRow>\r\n                                <FormGroup>\r\n                                  <Label htmlFor=\"projectName\">\r\n                                    Project name\r\n                                  </Label>\r\n                                  <Input\r\n                                    id=\"projectName\"\r\n                                    name=\"projectName\"\r\n                                    type=\"text\"\r\n                                    placeholder={projectName}\r\n                                  />\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                  <Label>Project category *</Label>\r\n                                  <Dropdown>\r\n                                    <Select\r\n                                      nodeRef={nodeRef}\r\n                                      show={show}\r\n                                      placeholder={categoryName}\r\n                                      onClick={handleToggleDropdown}\r\n                                    />\r\n                                    <List show={show}>\r\n                                      {projectCategory.map(\r\n                                        ({ id, projectCategoryName }) => (\r\n                                          <Option\r\n                                            key={id}\r\n                                            onClick={() =>\r\n                                              handleSelectCategory(id)\r\n                                            }\r\n                                          >\r\n                                            {projectCategoryName}\r\n                                          </Option>\r\n                                        )\r\n                                      )}\r\n                                    </List>\r\n                                  </Dropdown>\r\n                                </FormGroup>\r\n                              </FormRow>\r\n                              <FormGroup>\r\n                                <Label\r\n                                  onClick={() => {\r\n                                    setOpenDesc(true);\r\n                                  }}\r\n                                >\r\n                                  Description *\r\n                                </Label>\r\n                                {openDesc ? (\r\n                                  <>\r\n                                    <TextTiny\r\n                                      control=\"tiny-mce\"\r\n                                      name=\"description\"\r\n                                    />\r\n                                    <div className=\"flex items-center justify-end gap-x-3\">\r\n                                      <Button\r\n                                        kind=\"cancel\"\r\n                                        onClick={() => {\r\n                                          setOpenDesc(false);\r\n                                          resetForm();\r\n                                        }}\r\n                                        type=\"button\"\r\n                                      >\r\n                                        Cancel\r\n                                      </Button>\r\n                                      <Button\r\n                                        kind=\"success\"\r\n                                        onClick={() => {\r\n                                          setOpenDesc(false);\r\n                                        }}\r\n                                        type=\"button\"\r\n                                      >\r\n                                        Save\r\n                                      </Button>\r\n                                    </div>\r\n                                  </>\r\n                                ) : (\r\n                                  <div\r\n                                    className=\"cursor-pointer\"\r\n                                    dangerouslySetInnerHTML={{\r\n                                      __html: values.description,\r\n                                    }}\r\n                                    onClick={() => {\r\n                                      setOpenDesc(true);\r\n                                    }}\r\n                                  ></div>\r\n                                )}\r\n                              </FormGroup>\r\n                              <div className=\" flex items-center justify-center\">\r\n                                <Button\r\n                                  isLoading={isSubmitting}\r\n                                  type=\"submit\"\r\n                                  className=\" my-3\"\r\n                                  kind=\"success\"\r\n                                >\r\n                                  Submit\r\n                                </Button>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </Form>\r\n                    );\r\n                  }}\r\n                </Formik>\r\n              )}\r\n            </ModalBase>\r\n          );\r\n        })}\r\n      <div className=\"w-full overflow-x-auto overflow-y-hidden\">\r\n        <div className=\" bg-white rounded-3xl flex items-center justify-between py-8 px-10\">\r\n          <div className=\"w-2/12 hover:w-2/6 focus-within:w-2/6  transition-all ease-out\">\r\n            <HeaderSearch\r\n              onChange={(e: React.FormEvent<HTMLInputElement>) => {\r\n                setSearch(e.currentTarget.value);\r\n              }}\r\n            ></HeaderSearch>\r\n          </div>\r\n          <Button\r\n            type=\"button\"\r\n            href=\"/add-project\"\r\n            kind=\"secondary\"\r\n            className=\"bg-secondary bg-opacity-20 text-secondary\"\r\n          >\r\n            Create project\r\n          </Button>\r\n        </div>\r\n        {!!projectAll ? (\r\n          <>\r\n            <table className=\"table-project\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Id</th>\r\n                  <th>Project name</th>\r\n                  <th>Category name</th>\r\n                  <th>Creator</th>\r\n                  <th>Members</th>\r\n                  <th>Actions</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {searchFilterProject(listProject)?.map(\r\n                  ({ members, creator, id, projectName, categoryName }) => {\r\n                    const bgColor =\r\n                      categoryName === \"Dự án web\"\r\n                        ? \"bg-green-100\"\r\n                        : categoryName === \"Dự án phần mềm\"\r\n                        ? \"bg-blue-100\"\r\n                        : \"bg-orange-100\";\r\n                    const textColor =\r\n                      categoryName === \"Dự án web\"\r\n                        ? \"text-green-500\"\r\n                        : categoryName === \"Dự án phần mềm\"\r\n                        ? \"text-blue-500\"\r\n                        : \"text-orange-500\";\r\n                    return (\r\n                      <tr key={id}>\r\n                        <td>{id}</td>\r\n                        <td>\r\n                          <Link\r\n                            to={`/project-detail/${id}`}\r\n                            className=\"truncate text-secondary hover:underline cursor-pointer\"\r\n                          >\r\n                            {projectName}\r\n                          </Link>\r\n                        </td>\r\n                        <td>\r\n                          <span\r\n                            className={`w-[100px] text-center rounded-lg px-2 py-1 ${bgColor} ${textColor}`}\r\n                          >\r\n                            {categoryName}\r\n                          </span>\r\n                        </td>\r\n                        <td className=\"truncate\">{creator.name}</td>\r\n                        <td>\r\n                          <div className=\"flex items-center gap-x-2\">\r\n                            <Avatar.Group\r\n                              maxCount={2}\r\n                              maxStyle={{\r\n                                color: \"#f56a00\",\r\n                                backgroundColor: \"#fde3cf\",\r\n                              }}\r\n                            >\r\n                              {members.map(({ name, avatar, userId }) => (\r\n                                <Tooltip\r\n                                  key={userId}\r\n                                  title={name}\r\n                                  placement=\"top\"\r\n                                >\r\n                                  <Avatar\r\n                                    src={\r\n                                      <img\r\n                                        src={avatar}\r\n                                        alt={`${name} avatar`}\r\n                                      />\r\n                                    }\r\n                                  />\r\n                                </Tooltip>\r\n                              ))}\r\n                            </Avatar.Group>\r\n                            <span\r\n                              onClick={() => {\r\n                                handleToggleModalMember(id);\r\n                              }}\r\n                              className=\"w-[32px] h-[32px] cursor-pointer rounded-full border border-dashed flex items-center justify-center text-text3 border-text3 hover:text-text2 hover:border-text2 select-none transition-all\"\r\n                            >\r\n                              <svg\r\n                                xmlns=\"http://www.w3.org/2000/svg\"\r\n                                fill=\"none\"\r\n                                viewBox=\"0 0 24 24\"\r\n                                strokeWidth=\"1.5\"\r\n                                stroke=\"currentColor\"\r\n                                className=\"w-6 h-6\"\r\n                              >\r\n                                <path\r\n                                  strokeLinecap=\"round\"\r\n                                  strokeLinejoin=\"round\"\r\n                                  d=\"M12 4.5v15m7.5-7.5h-15\"\r\n                                />\r\n                              </svg>\r\n                            </span>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                          <div className=\"flex items-center text-gray-500 \">\r\n                            <span\r\n                              onClick={() => {\r\n                                handleToggleModal(id);\r\n                              }}\r\n                            >\r\n                              <IconEdit />\r\n                            </span>\r\n                            <span\r\n                              onClick={() => {\r\n                                handleToggleModalDeteleProject(id);\r\n                              }}\r\n                            >\r\n                              <IconDelete />\r\n                            </span>\r\n                          </div>\r\n                        </td>\r\n                      </tr>\r\n                    );\r\n                  }\r\n                )}\r\n              </tbody>\r\n            </table>\r\n            <div className=\"flex items-center justify-end my-5\">\r\n              <Pagination\r\n                hideOnSinglePage\r\n                defaultCurrent={1}\r\n                onChange={onChange}\r\n                current={current}\r\n                pageSize={6}\r\n                total={projectAll.length}\r\n                className=\"pl-5 ml-5\"\r\n              />\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <div className=\"flex justify-center items-center bg-lite h-[400px]\">\r\n            <div className=\"loader bg-lite p-5 rounded-full flex space-x-3\">\r\n              <div className=\"w-5 h-5 bg-error rounded-full animate-bounce\" />\r\n              <div className=\"w-5 h-5 bg-primary rounded-full animate-bounce\" />\r\n              <div className=\"w-5 h-5 bg-blue-500 rounded-full animate-bounce\" />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Project;\r\n"],"names":["children","onClick","className","isLoading","rest","child","defaultClassName","kind","href","to","show","placeholder","nodeRef","ref","xmlns","fill","viewBox","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","onChange","type","withErrorBoundary","props","useField","field","meta","touched","error","FallbackComponent","ErrorComponent","control","name","value","id","form","setFieldValue","initialValue","init","height","menubar","toolbar","content_style","onEditorChange","content","editor","htmlFor","portalWrapperElm","element","document","createElement","createPortalWrapper","containerClassName","bodyClassName","containerStyle","bodyStyle","onClose","visible","useEffect","body","appendChild","renderContent","style","createPortal","fillRule","clipRule","useClickOutside","useState","setShow","useRef","handleOutside","ev","current","contains","target","addEventListener","removeEventListener","useSelector","state","projectReducer","projectAll","projectCategory","userAll","userReducer","descRef","dispatch","useDispatch","setIsLoading","handleToggleDropdown","projectList","setProjectList","search","setSearch","openDesc","setOpenDesc","openModalBase","setOpenModalBase","openModalMember","setOpenModalMember","openModalDeleteProject","setOpenModalDeleteProject","handleToggleModal","getProjectCategoryApi","filter","u","handleToggleModalMember","getUserApi","handleToggleModalDeteleProject","admin","getStoreJson","USER_LOGIN","getProjectApi","add","useToast","setCurrent","listProject","setListProject","slice","data","map","projectName","deleteProject","message","duration","position","project","members","creator","projectId","e","currentTarget","item","toLowerCase","includes","avatar","userId","src","alt","assignUserProject","removeUserFromProject","categoryName","description","innerHTML","initialValues","categoryId","validationSchema","Yup","shape","required","onSubmit","values","setSubmitting","updateProject","isSubmitting","resetForm","projectCategoryName","handleSelectCategory","dangerouslySetInnerHTML","__html","bgColor","textColor","maxCount","maxStyle","color","backgroundColor","title","placement","hideOnSinglePage","defaultCurrent","page","pageSize","total","length"],"sourceRoot":""}