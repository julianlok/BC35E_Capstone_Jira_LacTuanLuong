{"version":3,"file":"static/js/230.c297ae16.chunk.js","mappings":"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","sources":["components/Button/Button.tsx","components/Dropdown/Dropdow.tsx","components/Dropdown/List.tsx","components/Dropdown/Option.tsx","components/Dropdown/Select.tsx","components/HeaderSearch/HeaderSearch.tsx","components/Input/Input.tsx","components/Input/TextTiny.tsx","components/Label/Label.tsx","components/Portal/Portal.tsx","components/Modal/ModalBase.tsx","components/common/ErrorComponent/ErrorComponent.tsx","components/common/FormGroup/FormGroup.tsx","components/common/FormRow/FormRow.tsx","components/icons/IconError.tsx","hooks/useClickOutside.tsx","types/global.tsx","components/Input/Textarea.tsx","components/Dropdown/SelectTag.tsx","components/Dropdown/ListTag.tsx","components/Dropdown/OptionTag.tsx","components/Slider/Slider.tsx","components/TaskDetail/TaskCard.tsx","components/TaskDetail/TaskBox.tsx","pages/Project/ProjectDetail.tsx"],"sourcesContent":["import { type } from \"os\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\ntype Props = {\r\n  children: JSX.Element | React.ReactNode;\r\n  type: string | any;\r\n  className?: string;\r\n  isLoading?: boolean;\r\n  href?: string;\r\n  kind?: string;\r\n  onClick?: any;\r\n};\r\n\r\nconst Button = ({\r\n  children,\r\n  onClick,\r\n  className = \"\",\r\n  isLoading = false,\r\n  ...rest\r\n}: Props) => {\r\n  const child = !!isLoading ? (\r\n    <div className=\"w-8 h-8 rounded-full border-4 border-white border-t-transparent border-b-transparent animate-spin\"></div>\r\n  ) : (\r\n    children\r\n  );\r\n\r\n  let defaultClassName =\r\n    \"text-base font-semibold rounded-xl flex items-center justify-center\";\r\n\r\n  switch (rest.kind) {\r\n    case \"primary\":\r\n      defaultClassName =\r\n        defaultClassName +\r\n        \" bg-gradient-to-r from-[#00a7b4] to-[#a4d96c] text-white p-4 min-h-[56px]\";\r\n      break;\r\n\r\n    case \"secondary\":\r\n      defaultClassName =\r\n        defaultClassName +\r\n        \" bg-secondary bg-opacity-20 text-secondary p-4 min-h-[56px]\";\r\n      break;\r\n\r\n    case \"cancel\":\r\n      defaultClassName =\r\n        defaultClassName +\r\n        \" bg-stock hover:bg-gray-100 transition-all text-text3 text-base font-medium font-mono px-4 py-2 rounded-lg\";\r\n      break;\r\n\r\n    case \"success\":\r\n      defaultClassName =\r\n        defaultClassName +\r\n        \" bg-blue-500 hover:bg-opacity-80  text-white px-4 py-2 font-mono\";\r\n      break;\r\n\r\n    case \"delete\":\r\n      defaultClassName =\r\n        defaultClassName +\r\n        \" bg-red-500 hover:bg-opacity-80 text-white px-4 py-2 font-mono\";\r\n      break;\r\n\r\n    default:\r\n      break;\r\n  }\r\n  if (rest.href)\r\n    return (\r\n      <Link to={rest.href} className={defaultClassName + \" \" + className}>\r\n        {children}\r\n      </Link>\r\n    );\r\n  return (\r\n    <button\r\n      onClick={onClick}\r\n      className={`cursor-pointer ${\r\n        defaultClassName +\r\n        \" \" +\r\n        (!!isLoading ? \"opacity-50 pointer-events-none\" : \"\")\r\n      } ${className}`}\r\n      {...rest}\r\n    >\r\n      {child}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport { AddUserType } from \"../../types/global\";\r\nexport type Props = {\r\n  children?: JSX.Element | React.ReactNode;\r\n  placeholder?: string;\r\n  className?: string;\r\n  show?: boolean;\r\n  onClick?: () => void;\r\n  dataDel?: () => void;\r\n  removeUser?: any;\r\n  clearListUser?: any;\r\n  nodeRef?: any;\r\n  data?: AddUserType[];\r\n\r\n  searchFilter?: (e: React.FormEvent<HTMLInputElement>) => void;\r\n};\r\nconst Dropdown = ({ children }: Props) => {\r\n  return <div className=\"relative \">{children}</div>;\r\n};\r\n\r\nexport default Dropdown;\r\n","import React from \"react\";\r\nimport { Props } from \"./Dropdow\";\r\n\r\nconst List = ({ children, show, className }: Props) => {\r\n  return (\r\n    <>\r\n      {show && (\r\n        <div\r\n          className={`absolute top-full left-0 w-full bg-white shadow-lg rounded-lg overflow-hidden z-10 ${className}`}\r\n        >\r\n          {children}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React from \"react\";\r\nimport { Props } from \"./Dropdow\";\r\n\r\nconst Option = ({ children, onClick, className = \" \" }: Props) => {\r\n  return (\r\n    <div\r\n      className={`py-4 px-5 cursor-pointer flex items-center justify-between transition-all ease-linear text-sm hover:text-[#42526e]  hover:bg-[rgba(9,30,66,0.04)] hover:border-l-4 hover:border-l-primary hover:bg-opacity-20 ${className}`}\r\n      onClick={onClick}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Option;\r\n","import React from \"react\";\r\nimport { Props } from \"./Dropdow\";\r\n\r\nconst Select = ({\r\n  show,\r\n  onClick,\r\n  placeholder = \"\",\r\n  className = \" text-text2 bg-bgInput\",\r\n  nodeRef,\r\n}: Props) => {\r\n  return (\r\n    <div\r\n      ref={nodeRef}\r\n      className={`flex items-center justify-between px-6 py-4  border border-strock rounded-xl text-sm font-semibold cursor-pointer select-none ${className}`}\r\n      onClick={onClick}\r\n    >\r\n      <span>{placeholder}</span>\r\n      <span>\r\n        {show ? (\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            className=\"h-4 w-4\"\r\n            fill=\"none\"\r\n            viewBox=\"0 0 24 24\"\r\n            stroke=\"currentColor\"\r\n            strokeWidth=\"2\"\r\n          >\r\n            <path\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              d=\"M5 15l7-7 7 7\"\r\n            />\r\n          </svg>\r\n        ) : (\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            className=\"h-4 w-4\"\r\n            fill=\"none\"\r\n            viewBox=\"0 0 24 24\"\r\n            stroke=\"currentColor\"\r\n            strokeWidth=\"2\"\r\n          >\r\n            <path\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              d=\"M19 9l-7 7-7-7\"\r\n            />\r\n          </svg>\r\n        )}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Select;\r\n","import React from \"react\";\r\n\r\ntype Props = {\r\n  onChange?: any;\r\n};\r\n\r\nconst HeaderSearch = ({ onChange }: Props) => {\r\n  return (\r\n    <div className=\"bg-gray-100 rounded-full shadow-[10px_10px_20px_rgba(218,_213,_213,_0.15)] p-2 w-full  flex items-center\">\r\n      <div className=\"flex-1 px-5\">\r\n        <input\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          placeholder=\"Search...\"\r\n          className=\"bg-transparent w-full text-sm text-text1 placeholder:text-text4 \"\r\n        />\r\n      </div>\r\n      <div className=\"w-[72px] rounded-full bg-secondary bg-opacity-20 text-secondary h-10 flex items-center justify-center flex-shrink-0\">\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          fill=\"none\"\r\n          viewBox=\"0 0 24 24\"\r\n          strokeWidth=\"1.5\"\r\n          stroke=\"currentColor\"\r\n          className=\"w-6 h-6\"\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            d=\"M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z\"\r\n          />\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HeaderSearch;\r\n","import React from \"react\";\r\nimport { useField } from \"formik\";\r\nimport { withErrorBoundary } from \"react-error-boundary\";\r\nimport ErrorComponent from \"../common/ErrorComponent/ErrorComponent\";\r\nimport { propsInput } from \"../../types/global\";\r\n\r\nconst Input = ({\r\n  children,\r\n  className = \"bg-bgInput\",\r\n  ...props\r\n}: propsInput) => {\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <div className=\"relative \">\r\n      <input\r\n        className={`w-full px-6 py-4 border  rounded-xl text-sm font-medium placeholder:text-text4 dark:placeholder:text-text-2 ${className} ${\r\n          meta.touched && meta.error\r\n            ? \"border-error text-error\"\r\n            : \"border-strock text-text1 dark:border-darkStoke\"\r\n        } ${children ? \"pr-14\" : \"\"}`}\r\n        {...props}\r\n        {...field}\r\n      />\r\n      {meta.touched && meta.error ? (\r\n        <span className=\"absolute bottom-0 left-1 translate-y-6 text-sm text-error font-medium pointer-events-none error-input\">\r\n          {meta.error}\r\n        </span>\r\n      ) : null}\r\n      {children && (\r\n        <span className=\" absolute right-6 top-2/4 -translate-y-2/4 cursor-pointer select-none\">\r\n          {children}\r\n        </span>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withErrorBoundary(Input, {\r\n  FallbackComponent: ErrorComponent,\r\n});\r\n","import React from \"react\";\r\nimport { Editor } from \"@tinymce/tinymce-react\";\r\nimport { Field } from \"formik\";\r\n\r\ntype Props = {\r\n  control: string;\r\n  name: string;\r\n  value?: string;\r\n};\r\n\r\nconst TextTiny = ({ control, name, value, ...props }: Props) => {\r\n  switch (control) {\r\n    case \"tiny-mce\":\r\n      return (\r\n        <>\r\n          <Field id={name} name={name} {...props}>\r\n            {({ form, field }: any) => {\r\n              const { setFieldValue } = form;\r\n\r\n              return (\r\n                <>\r\n                  <Editor\r\n                    value={field.value}\r\n                    initialValue={value}\r\n                    init={{\r\n                      height: 500,\r\n                      menubar: true,\r\n                      toolbar:\r\n                        \"undo redo | formatselect | \" +\r\n                        \"bold italic backcolor | alignleft aligncenter \" +\r\n                        \"alignright alignjustify | bullist numlist outdent indent | \" +\r\n                        \"removeformat | help\",\r\n                      content_style:\r\n                        \"body { font-family:Helvetica,Arial,sans-serif; font-size:14px }\",\r\n                    }}\r\n                    onEditorChange={(content, editor) => {\r\n                      setFieldValue(name, content);\r\n                    }}\r\n                  />\r\n                </>\r\n              );\r\n            }}\r\n          </Field>\r\n        </>\r\n      );\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nexport default TextTiny;\r\n","import React from \"react\";\r\n\r\ntype Props = {\r\n  children: JSX.Element | React.ReactNode;\r\n  htmlFor?: string;\r\n  onClick?: any;\r\n};\r\n\r\nconst Label = (props: Props) => {\r\n  const { children, htmlFor = \"\", onClick } = props;\r\n  return (\r\n    <label\r\n      onClick={onClick}\r\n      htmlFor={htmlFor}\r\n      className=\"text-sm text-left font-medium  text-text2 dark:text-text3 cursor-pointer inline-block mt-5\"\r\n    >\r\n      {children}\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Label;\r\n","import React, { useEffect } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport { portalType } from \"../../types/global\";\r\n\r\nfunction createPortalWrapper() {\r\n  const element = document.createElement(\"div\");\r\n  element.id = \"portal-wrapper\";\r\n  return element;\r\n}\r\n\r\nconst portalWrapperElm = createPortalWrapper();\r\n\r\nconst Portal = ({\r\n  containerClassName = \"\",\r\n  bodyClassName = \"\",\r\n  containerStyle = {},\r\n  bodyStyle = {},\r\n  onClose,\r\n  visible = false,\r\n  children,\r\n}: portalType) => {\r\n  useEffect(() => {\r\n    document.body.appendChild(portalWrapperElm);\r\n  }, []);\r\n\r\n  const renderContent = (\r\n    <div\r\n      className={`fixed inset-0 z-[99]  ${\r\n        visible ? \"\" : \"opacity-0 invisible\"\r\n      } ${containerClassName}`}\r\n      style={containerStyle}\r\n    >\r\n      <div\r\n        className=\"overlay absolute inset-0 bg-black bg-opacity-30 \"\r\n        onClick={onClose}\r\n      ></div>\r\n      <div\r\n        className={`content relative z-10 ${bodyClassName}`}\r\n        style={bodyStyle}\r\n      >\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n  return createPortal(renderContent, portalWrapperElm);\r\n};\r\n\r\nexport default Portal;\r\n","import React from \"react\";\r\nimport { portalType } from \"../../types/global\";\r\nimport Portal from \"../Portal/Portal\";\r\n\r\nconst ModalBase = ({ visible, children, onClose }: portalType) => {\r\n  return (\r\n    <>\r\n      <Portal\r\n        visible={visible}\r\n        onClose={onClose}\r\n        containerClassName=\"flex items-center justify-center\"\r\n      >\r\n        {children}\r\n      </Portal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ModalBase;\r\n","import React from \"react\";\r\n\r\ntype Props = {};\r\n\r\nconst ErrorComponent = (props: Props) => {\r\n  return (\r\n    <div className=\"text-red-500 bg-red-100 p-5 rounded-lg\">\r\n      Look like component is error\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorComponent;\r\n","import React from \"react\";\r\n\r\ntype Props = {\r\n  children: JSX.Element | React.ReactNode;\r\n};\r\n\r\nconst FormGroup = ({ children }: Props) => {\r\n  return (\r\n    <div className=\"flex flex-col gap-y-2 lg:gap-y-3 mb-4 lg:mb-5\">\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormGroup;\r\n","import React from \"react\";\r\n\r\ntype Props = {\r\n  children: JSX.Element | React.ReactNode;\r\n  className?: string;\r\n};\r\n\r\nconst FormRow = ({ children, className = \"grid-cols-2\" }: Props) => {\r\n  return (\r\n    <div className={`grid gap-x-[45px] mb-1 ${className}`}>{children}</div>\r\n  );\r\n};\r\n\r\nexport default FormRow;\r\n","import React from \"react\";\r\n\r\nconst IconError = () => {\r\n  return (\r\n    <span className=\"text-red-500\">\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        viewBox=\"0 0 24 24\"\r\n        fill=\"currentColor\"\r\n        className=\"w-6 h-6\"\r\n      >\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          d=\"M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12zM12 8.25a.75.75 0 01.75.75v3.75a.75.75 0 01-1.5 0V9a.75.75 0 01.75-.75zm0 8.25a.75.75 0 100-1.5.75.75 0 000 1.5z\"\r\n          clipRule=\"evenodd\"\r\n        />\r\n      </svg>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default IconError;\r\n","import { useState, useRef, useEffect } from \"react\";\r\nexport default function useClickOutside() {\r\n  const [show, setShow] = useState<boolean>(false);\r\n  const nodeRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    function handleOutside(this: Document, ev: MouseEvent) {\r\n      if (nodeRef.current && !nodeRef.current.contains(ev.target as Node)) {\r\n        setShow(false);\r\n      }\r\n    }\r\n\r\n    document.addEventListener(\"click\", handleOutside);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"click\", handleOutside);\r\n    };\r\n  }, []);\r\n\r\n  return { show, setShow, nodeRef };\r\n}\r\n","import React from \"react\";\r\n\r\nexport type Coords = {\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n};\r\n\r\nexport type propsInput = {\r\n  disabled?: boolean;\r\n  id?: string;\r\n  name: string;\r\n  type?: string;\r\n  placeholder?: string;\r\n  children?: React.ReactNode;\r\n  className?: string;\r\n  value?: string;\r\n};\r\n\r\nexport type portalType = {\r\n  containerClassName?: string;\r\n  bodyClassName?: string;\r\n  containerStyle?: Object;\r\n  bodyStyle?: Object;\r\n  visible: boolean;\r\n  onClose?: () => void;\r\n  children?: React.ReactNode;\r\n};\r\n\r\nexport interface DropResult {\r\n  allowedDropEffect: string;\r\n  dropEffect: string;\r\n  statusName: string;\r\n  statusId: string;\r\n}\r\n\r\nexport const type = {\r\n  CARD: \"card\",\r\n};\r\nexport const COLUMN_NAMES = {\r\n  BACKLOG: \"BACKLOG\",\r\n  SELECTED_FOR_DEVELOPMENT: \"SELECTED FOR DEVELOPMENT\",\r\n  IN_PROGRESS: \"IN PROGRESS\",\r\n  DONE: \"DONE\",\r\n};\r\n\r\nexport const ITEM_TYPE = \"ITEM\";\r\n\r\nexport interface ToastProps {\r\n  id: number;\r\n  type?: \"success\" | \"error\" | \"info\" | \"warning\";\r\n  message?: React.ReactNode;\r\n  duration?: number;\r\n  position?: ToastPositionType;\r\n  icon?: React.ReactNode | boolean;\r\n}\r\n\r\nexport type ToastPositionType =\r\n  | \"topLeft\"\r\n  | \"topCenter\"\r\n  | \"topRight\"\r\n  | \"bottomLeft\"\r\n  | \"bottomCenter\"\r\n  | \"bottomRight\";\r\n\r\nexport type RequiredToastProps = Required<ToastProps>;\r\n\r\nexport type ToastContextType = {\r\n  add: (toast: Omit<ToastProps, \"id\">) => void;\r\n  remove: (toastId: number, ref: React.RefObject<HTMLDivElement>) => void;\r\n  position: ToastPositionType;\r\n};\r\n\r\n/*------------------- Types Reducer -------------------*/\r\n\r\n// userReducer\r\n\r\nexport interface userType {\r\n  email?: string;\r\n  passWord?: string;\r\n  id?: string;\r\n  avatar?: string;\r\n  phoneNumber?: string;\r\n  name?: string;\r\n  accessToken?: string;\r\n  confirmPassWord?: string;\r\n}\r\n\r\nexport interface UserModel {\r\n  userId: number;\r\n  name: string;\r\n  avatar: string;\r\n  email: string;\r\n  phoneNumber: string;\r\n}\r\nexport interface AddUserType {\r\n  userId: number;\r\n  name: string;\r\n  avatar: string;\r\n}\r\n\r\nexport interface UserUpdateType {\r\n  id?: number;\r\n  email: string;\r\n  name: string;\r\n  phoneNumber: string;\r\n  passWord: string;\r\n  confirmPassWord?: string;\r\n}\r\nexport interface UserProjectType {\r\n  projectId: number;\r\n  userId: number;\r\n}\r\nexport interface UserTaskType {\r\n  taskId: number;\r\n  userId: number;\r\n}\r\nexport interface userState {\r\n  userLogin: userType;\r\n  userAll: UserModel[];\r\n  userByKeyword: UserModel[];\r\n}\r\n\r\nexport interface UserLoginType {\r\n  avatar: string;\r\n  email: string;\r\n  id: number;\r\n  name: string;\r\n  phoneNumber: string;\r\n}\r\n\r\nexport const ItemType = {\r\n  BOX: \"Box\",\r\n};\r\n\r\n// statusReducer\r\n\r\nexport interface statusState {\r\n  statuses: statusType[];\r\n}\r\nexport interface statusType {\r\n  statusId: string;\r\n  statusName: string;\r\n  alias: string;\r\n  deleted: string;\r\n}\r\n\r\nexport interface UpdateStatusType {\r\n  taskId: number;\r\n  statusId: string;\r\n}\r\n\r\nexport enum ColumnType {\r\n  BACKLOG,\r\n  DONE,\r\n  SELECTED_FOR_DEVELOPMENT = \"SELECTED FOR DEVELOPMENT\",\r\n  IN_PROGRESS = \"IN PROGRESS\",\r\n}\r\n\r\n// projectReduccer\r\nexport interface ProjectState {\r\n  projectAll: ProjectType[];\r\n  projectDetail: ProjectDetailType;\r\n  projectByKeyword: ProjectType[];\r\n  projectCategory: ProjectCategoryType[];\r\n  taskType: TaskType[];\r\n  lstTask: LstTask[];\r\n}\r\n\r\nexport interface TaskType {\r\n  id: number;\r\n  taskType: string;\r\n}\r\n\r\nexport interface UpdateTaskType {\r\n  listUserAsign: number[];\r\n  taskId: number;\r\n  taskName: string;\r\n  description: string;\r\n  statusId: string;\r\n  originalEstimate: number;\r\n  timeTrackingSpent: number;\r\n  timeTrackingRemaining: number;\r\n  projectId: number;\r\n  typeId: number;\r\n  priorityId: number;\r\n}\r\n\r\nexport interface CreateTaskType {\r\n  listUserAsign: number[];\r\n  taskName: string;\r\n  description: string;\r\n  statusId: string;\r\n  originalEstimate: number;\r\n  timeTrackingSpent: number;\r\n  timeTrackingRemaining: number;\r\n  projectId: number;\r\n  typeId: number;\r\n  priorityId: number;\r\n}\r\nexport interface ProjectType {\r\n  members: Member[];\r\n  creator: Creator;\r\n  id: number;\r\n  projectName: string;\r\n  description: string;\r\n  categoryId: number;\r\n  categoryName: string;\r\n  alias: string;\r\n  deleted: boolean;\r\n}\r\n\r\nexport interface Welcome {\r\n  id: number;\r\n  taskType: string;\r\n}\r\nexport interface ProjectUpdateType {\r\n  projectName: string;\r\n  description: string;\r\n  categoryId: number;\r\n}\r\n\r\nexport interface Creator {\r\n  id: number;\r\n  name: string;\r\n}\r\n\r\nexport interface Member {\r\n  userId: number;\r\n  name: string;\r\n  avatar: string;\r\n}\r\n\r\nexport interface ProjectCategoryType {\r\n  id: number;\r\n  projectCategoryName: string;\r\n}\r\n\r\nexport interface CreateProjectType {\r\n  projectName: string;\r\n  description: string;\r\n  categoryId: number;\r\n}\r\n\r\nexport interface ProjectDetailType {\r\n  lstTask: LstTask[];\r\n  members: Member[];\r\n  creator: Creator;\r\n  id: number;\r\n  projectName: string;\r\n  description: string;\r\n  projectCategory: Creator;\r\n  alias: string;\r\n  index?: number;\r\n}\r\n\r\nexport interface Creator {\r\n  id: number;\r\n  name: string;\r\n}\r\n\r\nexport interface LstTask {\r\n  lstTaskDeTail: LstTaskDeTail[];\r\n  statusId: string;\r\n  statusName: string;\r\n  alias: string;\r\n}\r\n\r\nexport interface LstTaskDeTail {\r\n  priorityTask: PriorityTask;\r\n  taskTypeDetail: TaskTypeDetail;\r\n  assigness: Assigness[];\r\n  lstComment: any[];\r\n  taskId: number;\r\n  taskName: string;\r\n  alias: string;\r\n  description: string;\r\n  statusId: string;\r\n  originalEstimate: number;\r\n  timeTrackingSpent: number;\r\n  timeTrackingRemaining: number;\r\n  typeId: number;\r\n  priorityId: number;\r\n  projectId: number;\r\n}\r\n\r\nexport interface Assigness {\r\n  id: number;\r\n  avatar: string;\r\n  name: string;\r\n  alias: string;\r\n}\r\n\r\nexport interface PriorityTask {\r\n  priorityId: number;\r\n  priority: string;\r\n}\r\n\r\nexport interface TaskTypeDetail {\r\n  id: number;\r\n  taskType: string;\r\n}\r\n\r\nexport interface Member {\r\n  userId: number;\r\n  name: string;\r\n  avatar: string;\r\n  email: string;\r\n  phoneNumber: string;\r\n}\r\n\r\n// priorityReducer\r\n\r\nexport interface PriorityState {\r\n  priority: PriorityType[];\r\n}\r\nexport interface PriorityType {\r\n  priorityId: number;\r\n  priority: string;\r\n  description: string;\r\n  deleted: boolean;\r\n  alias: string;\r\n}\r\n\r\n// commentReducer\r\nexport interface InsertCommentType {\r\n  taskId: number;\r\n  contentComment: string;\r\n}\r\n\r\nexport interface CommentState {\r\n  comment: CommentModel[];\r\n}\r\nexport interface CommentModel {\r\n  user: User;\r\n  id: number;\r\n  userId: number;\r\n  taskId: number;\r\n  contentComment: string;\r\n  deleted: boolean;\r\n  alias: string;\r\n}\r\n\r\nexport interface User {\r\n  userId: number;\r\n  name: string;\r\n  avatar: string;\r\n}\r\n","import React from \"react\";\r\nimport { useField } from \"formik\";\r\nimport { propsInput } from \"../../types/global\";\r\n\r\nconst Textarea = ({ className, ...props }: propsInput) => {\r\n  const [field] = useField(props);\r\n\r\n  return (\r\n    <>\r\n      <textarea\r\n        className={`w-full border border-gray-400 transition-all overflow-hidden resize-none rounded-lg px-2 pt-1 placeholder:text-sm focus:outline-none focus:border-blue-400 ${className}`}\r\n        {...field}\r\n        {...props}\r\n      ></textarea>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Textarea;\r\n","import React from \"react\";\r\nimport { Props } from \"./Dropdow\";\r\n\r\nconst SelectTag = ({\r\n  show,\r\n  onClick,\r\n  placeholder = \"\",\r\n  className = \"max-w-[460px] text-text5 bg-[#F4F5F6]\",\r\n  nodeRef,\r\n  data = [],\r\n  searchFilter,\r\n  removeUser,\r\n  clearListUser,\r\n}: Props) => {\r\n  const renderIcon = () => {\r\n    if (data.length === 0) {\r\n      return show ? (\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          className=\"h-4 w-4\"\r\n          fill=\"none\"\r\n          viewBox=\"0 0 24 24\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            d=\"M5 15l7-7 7 7\"\r\n          />\r\n        </svg>\r\n      ) : (\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          className=\"h-4 w-4\"\r\n          fill=\"none\"\r\n          viewBox=\"0 0 24 24\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            d=\"M19 9l-7 7-7-7\"\r\n          />\r\n        </svg>\r\n      );\r\n    } else {\r\n      return (\r\n        <span\r\n          className=\"hover:text-error\"\r\n          onClick={() => {\r\n            clearListUser();\r\n          }}\r\n        >\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            viewBox=\"0 0 20 20\"\r\n            fill=\"currentColor\"\r\n            className=\"w-5 h-5\"\r\n          >\r\n            <path d=\"M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z\" />\r\n          </svg>\r\n        </span>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={nodeRef}\r\n      className={`flex items-center justify-between gap-x-5 px-6 py-4 border rounded-xl text-sm cursor-pointer select-none font-semibold ${className}`}\r\n      onClick={onClick}\r\n    >\r\n      <div>\r\n        <ul className=\"flex flex-wrap items-center gap-x-2 gap-y-1 \">\r\n          {data?.map(({ userId, name }) => (\r\n            <li\r\n              key={userId + name}\r\n              className=\"flex items-center justify-between gap-x-2 p-1 border border-strock bg-white rounded-lg\"\r\n            >\r\n              <span className=\"text-text1 \">{name}</span>\r\n              <span\r\n                className=\"flex items-center justify-center w-4 h-4 border rounded-full hover:text-error hover:border-error transition-all\"\r\n                onClick={() => {\r\n                  removeUser(userId);\r\n                }}\r\n              >\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  viewBox=\"0 0 20 20\"\r\n                  fill=\"currentColor\"\r\n                  className=\"w-5 h-5\"\r\n                >\r\n                  <path d=\"M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z\" />\r\n                </svg>\r\n              </span>\r\n            </li>\r\n          ))}\r\n\r\n          <li>\r\n            <input\r\n              className=\"text-text1 bg-transparent w-[150px] max-w-[150px] placeholder:text-text2\"\r\n              onChange={searchFilter}\r\n              type=\"text\"\r\n              placeholder={placeholder}\r\n            />\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <span>{renderIcon()}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectTag;\r\n","import React from \"react\";\r\nimport { Props } from \"./Dropdow\";\r\n\r\nconst ListTag = ({ children, show, className }: Props) => {\r\n  return (\r\n    <>\r\n      {show && (\r\n        <div\r\n          className={`absolute top-full left-0 w-full bg-white shadow rounded-lg overflow-x-hidden overflow-y-auto scrollbar-none max-h-[180px] h-[180px] z-10 ${className}`}\r\n        >\r\n          {children}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ListTag;\r\n","import React, { memo } from \"react\";\r\nimport { Props } from \"./Dropdow\";\r\n\r\nconst OptionTag = ({\r\n  children,\r\n  onClick,\r\n  className = \" hover:bg-opacity-20 \",\r\n}: Props) => {\r\n  return (\r\n    <div\r\n      className={`py-4 px-5 cursor-pointer flex items-center justify-between transition-all ease-linear text-sm font-medium select-none hover:text-[#42526e]  hover:bg-[rgba(9,30,66,0.04)] ${className}`}\r\n      onClick={onClick}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(OptionTag);\r\n","import React from \"react\";\r\nimport { useField } from \"formik\";\r\nexport type RangeType = {\r\n  id?: string;\r\n  name: string;\r\n  type?: string;\r\n  min: number;\r\n  max: number;\r\n  defaultValue: number;\r\n};\r\n\r\nconst Slider = ({ min, max, ...props }: RangeType) => {\r\n  const [field, meta] = useField(props);\r\n\r\n  return (\r\n    <div className=\"flex-col items-center justify-center h-full\">\r\n      <div className=\"flex items-center gap-x-2\">\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"currentColor\"\r\n          className=\"w-6 h-6\"\r\n        >\r\n          <path\r\n            fillRule=\"evenodd\"\r\n            d=\"M12 2.25c-5.385 0-9.75 4.365-9.75 9.75s4.365 9.75 9.75 9.75 9.75-4.365 9.75-9.75S17.385 2.25 12 2.25zM12.75 6a.75.75 0 00-1.5 0v6c0 .414.336.75.75.75h4.5a.75.75 0 000-1.5h-3.75V6z\"\r\n            clipRule=\"evenodd\"\r\n          />\r\n        </svg>\r\n\r\n        <input\r\n          className=\"w-full  bg-[#f4f5f6]\"\r\n          type=\"range\"\r\n          {...props}\r\n          {...field}\r\n        />\r\n      </div>\r\n      <div className=\"flex items-center justify-between\">\r\n        <span className=\"font-medium text-[#B1B5C3]\">{min}h logged</span>\r\n        <span className=\"font-medium text-[#B1B5C3]\">{max}h remaining</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Slider;\r\n","import React, { useState } from \"react\";\r\nimport { Form, Formik } from \"formik\";\r\n\r\nimport Textarea from \"../../components/Input/Textarea\";\r\nimport ModalBase from \"../../components/Modal/ModalBase\";\r\nimport Dropdow from \"../../components/Dropdown/Dropdow\";\r\nimport Select from \"../../components/Dropdown/Select\";\r\nimport List from \"../../components/Dropdown/List\";\r\nimport Option from \"../../components/Dropdown/Option\";\r\nimport useClickOutside from \"../../hooks/useClickOutside\";\r\nimport FormGroup from \"../../components/common/FormGroup/FormGroup\";\r\nimport Label from \"../../components/Label/Label\";\r\nimport SelectTag from \"../../components/Dropdown/SelectTag\";\r\nimport ListTag from \"../../components/Dropdown/ListTag\";\r\nimport OptionTag from \"../../components/Dropdown/OptionTag\";\r\nimport Input from \"../../components/Input/Input\";\r\nimport Slider from \"../../components/Slider/Slider\";\r\nimport FormRow from \"../../components/common/FormRow/FormRow\";\r\nimport TextTiny from \"../../components/Input/TextTiny\";\r\nimport Button from \"../../components/Button/Button\";\r\nimport { useDrag } from \"react-dnd\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Avatar, Tooltip } from \"antd\";\r\nimport {\r\n  AddUserType,\r\n  ItemType,\r\n  LstTaskDeTail,\r\n  UserModel,\r\n  userType,\r\n} from \"../../types/global\";\r\nimport { DropResult } from \"../../types/global\";\r\nimport { useToast } from \"../Toast\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { DispathType, RootState } from \"../../redux/config\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { getUserApi } from \"../../redux/userReducer/userReducer\";\r\nimport { getStoreJson, USER_LOGIN } from \"../../util/setting\";\r\nimport { getPriorityApi } from \"../../redux/priorityReducer/priorityReducer\";\r\nimport {\r\n  getStatusApi,\r\n  updateStatus,\r\n} from \"../../redux/statusReducer/statusReducer\";\r\nimport {\r\n  deleteTask,\r\n  getProjectDetailByIdApi,\r\n  getTaskTypeApi,\r\n  updateTask,\r\n} from \"../../redux/projectReducer/projectReducer\";\r\nimport {\r\n  deleteCommentApi,\r\n  getCommentApi,\r\n  insertCommentApi,\r\n} from \"../../redux/commentReducer/commentReducer\";\r\nimport IconError from \"../icons/IconError\";\r\n\r\ntype Props = {\r\n  index: number;\r\n\r\n  items: LstTaskDeTail;\r\n  changeStatusName: (\r\n    item: LstTaskDeTail,\r\n\r\n    statusId: string,\r\n    taskId: number\r\n  ) => void;\r\n};\r\n\r\ninterface Values {\r\n  listUserAsign: number[];\r\n  taskId: number;\r\n  taskName: string;\r\n  description: string;\r\n  statusId: string;\r\n  originalEstimate: number;\r\n  timeTrackingSpent: number;\r\n  timeTrackingRemaining: number;\r\n  projectId: number;\r\n  typeId: number;\r\n  priorityId: number;\r\n  comment?: string;\r\n}\r\n\r\nconst TaskCard = ({ index, items, changeStatusName }: Props) => {\r\n  const { add } = useToast();\r\n  const {\r\n    taskName,\r\n    priorityTask,\r\n    taskTypeDetail,\r\n    statusId,\r\n    taskId,\r\n    projectId,\r\n    assigness,\r\n    originalEstimate: estimate,\r\n    timeTrackingSpent: spent,\r\n    timeTrackingRemaining,\r\n    description,\r\n    priorityId,\r\n    typeId,\r\n  } = items;\r\n  const taskTypeCurrent =\r\n    taskTypeDetail.taskType === \"bug\" ? \"🐞 BUG\" : \"✅ NEW TASK\";\r\n  const statusCurrent =\r\n    statusId === \"1\"\r\n      ? \"BACKLOG\"\r\n      : statusId === \"2\"\r\n      ? \"SELECTED FOR DEVELOPMENT\"\r\n      : statusId === \"3\"\r\n      ? \"IN PROGRESS\"\r\n      : \"DONE\";\r\n\r\n  const [{ isDragging }, drag, dragPreview] = useDrag(\r\n    () => ({\r\n      type: ItemType.BOX,\r\n      item: {\r\n        ...items,\r\n        index,\r\n      },\r\n      end: (item, monitor) => {\r\n        const dropResult = monitor.getDropResult();\r\n        if (item && dropResult) {\r\n          const { statusId, statusName } = dropResult as DropResult;\r\n\r\n          if (statusId !== item.statusId) {\r\n            dispatch(updateStatus({ taskId, statusId }));\r\n            changeStatusName(item, statusId, taskId);\r\n            add({\r\n              type: \"success\",\r\n              message: `Move ${taskName} to ${statusName} successfully `,\r\n              duration: 5000,\r\n              position: \"topCenter\",\r\n            });\r\n          }\r\n        }\r\n      },\r\n      collect: (monitor) => ({\r\n        isDragging: monitor.isDragging(),\r\n      }),\r\n    }),\r\n    [add, changeStatusName, items, taskId, taskName]\r\n  );\r\n  let colorPriority: string =\r\n    priorityTask.priority === \"High\"\r\n      ? \"bg-[#e65100]\"\r\n      : priorityTask.priority === \"Medium\"\r\n      ? \"bg-[#f9d900]\"\r\n      : \"bg-[#2ecd6f]\";\r\n  let colorTaskType: string =\r\n    taskTypeDetail.taskType === \"bug\" ? \"error\" : \"secondary\";\r\n\r\n  // Update Task\r\n\r\n  const { comment } = useSelector((state: RootState) => state.commentReducer);\r\n\r\n  const { priority: priorityAll } = useSelector(\r\n    (state: RootState) => state.priorityReducer\r\n  );\r\n  const { statuses } = useSelector((state: RootState) => state.statusReducer);\r\n  const { taskType: taskTypeAll } = useSelector(\r\n    (state: RootState) => state.projectReducer\r\n  );\r\n  const dispatch: DispathType = useDispatch();\r\n  // Admin\r\n  const admin: userType = getStoreJson(USER_LOGIN);\r\n  const { userAll } = useSelector((state: RootState) => state.userReducer);\r\n  const [openModalBase, setOpenModalBase] = useState<boolean>(false);\r\n  const [openModalDeleteTask, setpenModalDeleteTask] = useState<boolean>(false);\r\n  const [addUser, setAddUser] = useState<AddUserType[]>([]);\r\n  const [search, setSearch] = useState<string>(\"\");\r\n  const { nodeRef, show: userTag, setShow: setUserTag } = useClickOutside();\r\n  const [openDesc, setOpenDesc] = useState<boolean>(false);\r\n  const [openTaskName, setOpenTaskName] = useState<boolean>(false);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [isLoadingBtn, setIsLoadingBtn] = useState<boolean>(false);\r\n  const [isLoadingDel, setIsLoadingDel] = useState<boolean>(false);\r\n  const searchFilter = (data: UserModel[]) => {\r\n    return data?.filter((item) => item?.name.toLowerCase().includes(search));\r\n  };\r\n\r\n  const handleOpenModal = async () => {\r\n    setIsLoading(true);\r\n    setOpenDesc(false);\r\n    assigness.map(({ avatar, id, name }) => {\r\n      return setAddUser((prev) => [\r\n        ...prev,\r\n        {\r\n          userId: id,\r\n          name,\r\n          avatar,\r\n        },\r\n      ]);\r\n    });\r\n    await dispatch(getCommentApi(taskId));\r\n\r\n    await dispatch(getTaskTypeApi());\r\n    await dispatch(getStatusApi());\r\n    await dispatch(getPriorityApi());\r\n    await dispatch(getUserApi());\r\n    setOpenModalBase(true);\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const removeUser = (id: number) => {\r\n    setAddUser(addUser.filter((item) => item.userId !== id));\r\n  };\r\n  const clearListUser = () => {\r\n    setAddUser(addUser.slice(addUser.length, addUser.length));\r\n  };\r\n\r\n  const {\r\n    show: taskType,\r\n    setShow: setTaskType,\r\n    nodeRef: taskTypeRef,\r\n  } = useClickOutside();\r\n  const handleToggleTaskType = () => {\r\n    setTaskType(!taskType);\r\n  };\r\n\r\n  const {\r\n    show: priority,\r\n    setShow: setPriority,\r\n    nodeRef: priorityRef,\r\n  } = useClickOutside();\r\n  const handleTogglePriority = () => {\r\n    setPriority(!priority);\r\n  };\r\n\r\n  const {\r\n    show: status,\r\n    setShow: setStatus,\r\n    nodeRef: statusRef,\r\n  } = useClickOutside();\r\n  const handleToggleStatus = () => {\r\n    setStatus(!status);\r\n  };\r\n\r\n  const initialValues: Values = {\r\n    listUserAsign: [],\r\n    taskId: taskId,\r\n    taskName,\r\n    description,\r\n    statusId,\r\n    originalEstimate: estimate,\r\n    timeTrackingSpent: spent,\r\n    timeTrackingRemaining,\r\n    projectId,\r\n    typeId,\r\n    priorityId,\r\n    comment: \"\",\r\n  };\r\n\r\n  return isDragging ? (\r\n    <div\r\n      className={`shadow rounded-md border-2 border-gray-400 border-dashed bg-lite `}\r\n    >\r\n      <li ref={dragPreview} className={`my-2  p-5 cursor-grabbing`}>\r\n        <div className=\"flex flex-col gap-y-5 opacity-0\">\r\n          <div className=\"flex items-start justify-between\">\r\n            <div className=\"w-[65%]\">\r\n              <span>{taskName}</span>\r\n            </div>\r\n            <div>\r\n              <span>{taskTypeDetail.taskType}</span>\r\n            </div>\r\n          </div>\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <span>{priorityTask.priority}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </li>\r\n    </div>\r\n  ) : (\r\n    <>\r\n      {/* Modal delete task */}\r\n      {openModalDeleteTask && (\r\n        <ModalBase\r\n          visible={openModalDeleteTask}\r\n          onClose={() => {\r\n            setpenModalDeleteTask(false);\r\n          }}\r\n        >\r\n          {isLoadingDel ? (\r\n            <div className=\"w-8 h-8 rounded-full border-4 border-blue-300 border-t-transparent animate-spin\"></div>\r\n          ) : (\r\n            <>\r\n              <div className=\"relative bg-white max-w-[500px] w-[400px] max-h-[350px]  overflow-hidden rounded-lg shadow-sdSecondary\">\r\n                <div className=\"flex gap-x-2 p-6\">\r\n                  <IconError />\r\n                  <div className=\"flex-1\">\r\n                    <h3 className=\"text-xl font-mono font-semibold\">\r\n                      Delete {taskName}?\r\n                    </h3>\r\n                  </div>\r\n                </div>\r\n                <div className=\"text-sm text-text2 leading-6 px-6\">\r\n                  <p className=\"mb-3\">\r\n                    You're about to permanently delete this task, its comments\r\n                    and attachments, and all of its data.\r\n                  </p>\r\n                  <p>\r\n                    If you're not sure, you can resolve or close this issue\r\n                    instead.\r\n                  </p>\r\n                </div>\r\n                <div className=\"flex items-start justify-end gap-x-3 px-6 py-5\">\r\n                  <Button\r\n                    kind=\"cancel\"\r\n                    type=\"button\"\r\n                    onClick={() => {\r\n                      setpenModalDeleteTask(false);\r\n                    }}\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                  <Button\r\n                    kind=\"delete\"\r\n                    type=\"button\"\r\n                    onClick={async () => {\r\n                      setIsLoadingDel(true);\r\n                      await dispatch(deleteTask(taskId));\r\n                      await dispatch(getProjectDetailByIdApi(projectId));\r\n                      setIsLoadingDel(false);\r\n                      setpenModalDeleteTask(false);\r\n                      setOpenModalBase(false);\r\n\r\n                      add({\r\n                        type: \"success\",\r\n                        message: `Delete ${taskName} successfully`,\r\n                        duration: 3000,\r\n                        position: \"topRight\",\r\n                      });\r\n                    }}\r\n                  >\r\n                    Delete\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </>\r\n          )}\r\n        </ModalBase>\r\n      )}\r\n      {openModalBase && (\r\n        <ModalBase\r\n          visible={openModalBase}\r\n          onClose={() => {\r\n            setOpenModalBase(false);\r\n          }}\r\n        >\r\n          <Formik\r\n            initialValues={initialValues}\r\n            onSubmit={async (\r\n              {\r\n                description,\r\n                listUserAsign,\r\n                originalEstimate,\r\n                priorityId,\r\n                projectId,\r\n                statusId,\r\n                taskName,\r\n                taskId,\r\n                timeTrackingRemaining,\r\n                timeTrackingSpent,\r\n                typeId,\r\n              },\r\n              { setSubmitting, resetForm }\r\n            ) => {\r\n              listUserAsign = addUser.map((item) => item.userId);\r\n              timeTrackingRemaining = originalEstimate - timeTrackingSpent;\r\n              setSubmitting(true);\r\n\r\n              await dispatch(\r\n                updateTask({\r\n                  listUserAsign,\r\n                  taskId,\r\n                  taskName,\r\n                  description,\r\n                  statusId,\r\n                  originalEstimate,\r\n                  timeTrackingSpent,\r\n                  timeTrackingRemaining,\r\n                  projectId,\r\n                  typeId,\r\n                  priorityId,\r\n                })\r\n              );\r\n              await resetForm();\r\n            }}\r\n          >\r\n            {({ isSubmitting, setFieldValue, values, resetForm }) => {\r\n              const { priorityId, statusId, typeId, description } = values;\r\n              const placeholderPriority =\r\n                priorityId === 1\r\n                  ? \"🟥 High\"\r\n                  : priorityId === 2\r\n                  ? \"🟨 Medium\"\r\n                  : priorityId === 3\r\n                  ? \"🟩 Low\"\r\n                  : priorityId === 4\r\n                  ? \"🟩 Lowest\"\r\n                  : priorityTask.priority;\r\n              const placeholderStatus =\r\n                statusId === \"1\"\r\n                  ? \"💙 BACKLOG\"\r\n                  : statusId === \"2\"\r\n                  ? \"🧡 SELECTED FOR DEVELOPMENT\"\r\n                  : statusId === \"3\"\r\n                  ? \"❤️ IN PROGRESS\"\r\n                  : statusId === \"4\"\r\n                  ? \"💚 DONE\"\r\n                  : statusCurrent;\r\n              const placeholderType =\r\n                typeId === 1\r\n                  ? \"🐞 BUG\"\r\n                  : typeId === 2\r\n                  ? \"✅ NEW TASK\"\r\n                  : taskTypeCurrent;\r\n\r\n              return (\r\n                <Form>\r\n                  <div className=\"relative bg-white min-w-[1280px] rounded-md shadow-lg\">\r\n                    {isLoading ? (\r\n                      <div className=\"w-8 h-8 rounded-full border-4 border-blue-300 border-t-transparent animate-spin\"></div>\r\n                    ) : (\r\n                      <>\r\n                        <button\r\n                          onClick={() => {\r\n                            setOpenModalBase(false);\r\n                          }}\r\n                          className=\"absolute px-3 py-1 rounded-full top-0 right-0 -translate-y-2/4 translate-x-2/4 bg-error bg-opacity-20 hover:bg-opacity-50 transition-all ease-linear cursor-pointer\"\r\n                        >\r\n                          <i className=\"fa-solid fa-xmark text-3xl text-red-600\"></i>\r\n                        </button>\r\n                        <div className=\"px-12 pt-7 pb-4 flex items-center justify-between\">\r\n                          <div className=\"w-2/4 text-text5 text-xl font-semibold \">\r\n                            {taskTypeCurrent} - {taskId}\r\n                          </div>\r\n\r\n                          <div className=\"flex items-center gap-x-8\">\r\n                            <button className=\"flex items-baseline justify-center gap-2 text-[#42526e] bg-[rgba(9,30,66,0.04)] px-3 py-1 hover:bg-gray-200 rounded transition-all ease-linear\">\r\n                              <i className=\"fa-regular fa-paper-plane \"></i>\r\n                              <span>Give Feedback</span>\r\n                            </button>\r\n                            <button className=\"flex items-baseline justify-center gap-2 text-[#42526e] bg-[rgba(9,30,66,0.04)] px-3 py-1 hover:bg-gray-200 rounded transition-all ease-linear\">\r\n                              <i className=\"fa-solid fa-link\"></i>\r\n                              <span>Link Issue</span>\r\n                            </button>\r\n                            <button\r\n                              onClick={() => {\r\n                                setpenModalDeleteTask(true);\r\n                              }}\r\n                              className=\"flex items-center justify-center text-[#42526e] bg-[rgba(9,30,66,0.04)] hover:bg-error hover:bg-opacity-20 hover:text-error transition-all ease-linear w-10 h-10 rounded text-xl\"\r\n                            >\r\n                              <i className=\"fa-regular fa-trash-can\"></i>\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n\r\n                        <div className=\" flex items-start justify-between gap-x-20 pl-8 pr-5 pb-8\">\r\n                          <div className=\"w-[60%] overflow-x-hidden overflow-y-auto max-h-[500px] scrollbar-none \">\r\n                            {openTaskName ? (\r\n                              <>\r\n                                <Input\r\n                                  className=\"appearance-none bg-bgInput outline-none border-none\"\r\n                                  id=\"taskName\"\r\n                                  name=\"taskName\"\r\n                                  type=\"text\"\r\n                                  placeholder=\"\"\r\n                                ></Input>\r\n                                <div className=\"flex items-center justify-end gap-x-3 \">\r\n                                  <Button\r\n                                    onClick={() => {\r\n                                      setOpenTaskName(false);\r\n                                    }}\r\n                                    type=\"button\"\r\n                                    kind=\"cancel\"\r\n                                  >\r\n                                    Cancel\r\n                                  </Button>\r\n                                </div>\r\n                              </>\r\n                            ) : (\r\n                              <h1\r\n                                onClick={() => {\r\n                                  setOpenTaskName(true);\r\n                                }}\r\n                                className=\"font-medium text-2xl text-text2 text-center cursor-pointer mb-5\"\r\n                              >\r\n                                {values.taskName}\r\n                              </h1>\r\n                            )}\r\n                            <FormGroup>\r\n                              <Label\r\n                                onClick={() => {\r\n                                  setOpenDesc(true);\r\n                                }}\r\n                              >\r\n                                Description *\r\n                              </Label>\r\n                              {openDesc ? (\r\n                                <>\r\n                                  <TextTiny\r\n                                    control=\"tiny-mce\"\r\n                                    name=\"description\"\r\n                                    value={values.description ?? description}\r\n                                  />\r\n                                  <div className=\"flex items-center justify-end gap-x-3\">\r\n                                    <Button\r\n                                      kind=\"cancel\"\r\n                                      onClick={() => {\r\n                                        setOpenDesc(false);\r\n                                      }}\r\n                                      type=\"button\"\r\n                                    >\r\n                                      Cancel\r\n                                    </Button>\r\n                                  </div>\r\n                                </>\r\n                              ) : (\r\n                                <div\r\n                                  dangerouslySetInnerHTML={{\r\n                                    __html: description,\r\n                                  }}\r\n                                  className=\"cursor-pointer text-sm text-text4\"\r\n                                  onClick={() => {\r\n                                    setOpenDesc(true);\r\n                                  }}\r\n                                ></div>\r\n                              )}\r\n                            </FormGroup>\r\n                            <div className=\" flex items-center gap-x-3 mb-5\">\r\n                              <span className=\"w-11 h-11 rounded-full overflow-hidden\">\r\n                                <img\r\n                                  className=\"w-full h-full object-cover\"\r\n                                  src={admin.avatar}\r\n                                  alt=\"avatar\"\r\n                                />\r\n                              </span>\r\n\r\n                              <div className=\"flex-1 flex items-center gap-x-3\">\r\n                                <Textarea\r\n                                  className=\"pt-2 h-10\"\r\n                                  name=\"comment\"\r\n                                  placeholder=\"Add a comment ...\"\r\n                                ></Textarea>\r\n                                <Button\r\n                                  isLoading={isLoadingBtn}\r\n                                  onClick={async () => {\r\n                                    if (values.comment) {\r\n                                      setIsLoadingBtn(true);\r\n                                      await dispatch(\r\n                                        insertCommentApi({\r\n                                          taskId,\r\n                                          contentComment: values.comment,\r\n                                        })\r\n                                      );\r\n                                      await dispatch(getCommentApi(taskId));\r\n\r\n                                      setIsLoadingBtn(false);\r\n                                    }\r\n                                  }}\r\n                                  type=\"button\"\r\n                                  kind=\"success\"\r\n                                >\r\n                                  Send\r\n                                </Button>\r\n                              </div>\r\n                            </div>\r\n                            {comment.map(({ user, contentComment, id }) => {\r\n                              const isActiveDelete =\r\n                                parseInt(admin.id || \"0\") === user.userId;\r\n                              return (\r\n                                <div\r\n                                  key={id}\r\n                                  className=\" flex items-start gap-x-3 mb-5\"\r\n                                >\r\n                                  <span className=\"w-9 h-9 rounded-full overflow-hidden\">\r\n                                    <img\r\n                                      className=\"w-full h-full object-cover\"\r\n                                      src={user.avatar}\r\n                                      alt=\"avatar\"\r\n                                    />\r\n                                  </span>\r\n                                  <div className=\"flex flex-col\">\r\n                                    <h4 className=\"text-text5 font-semibold\">\r\n                                      {user.name}\r\n                                    </h4>\r\n                                    <div className=\"flex flex-col gap-y-0\">\r\n                                      <div className=\"text-text3 \">\r\n                                        <span>{contentComment}</span>\r\n                                      </div>\r\n                                      {isActiveDelete && (\r\n                                        <div className=\"flex gap-x-2\">\r\n                                          <span className=\"text-xs text-blue-500 cursor-pointer\">\r\n                                            Edit\r\n                                          </span>\r\n                                          <span\r\n                                            onClick={async () => {\r\n                                              await dispatch(\r\n                                                deleteCommentApi(id)\r\n                                              );\r\n                                              await dispatch(\r\n                                                getCommentApi(taskId)\r\n                                              );\r\n                                            }}\r\n                                            className=\"text-xs text-error cursor-pointer\"\r\n                                          >\r\n                                            Delete\r\n                                          </span>\r\n                                        </div>\r\n                                      )}\r\n                                    </div>\r\n                                  </div>\r\n                                </div>\r\n                              );\r\n                            })}\r\n                          </div>\r\n                          <div className=\"w-[40%] pr-5 overflow-x-hidden overflow-y-auto h-[500px] max-h-[500px] scrollbar-thumb-stone-300 scrollbar-track-slate-100 scrollbar-thin \">\r\n                            <FormRow>\r\n                              <FormGroup>\r\n                                <Label>Priority</Label>\r\n                                <Dropdow>\r\n                                  <Select\r\n                                    className=\"text-text2 bg-bgInput\"\r\n                                    nodeRef={priorityRef}\r\n                                    placeholder={placeholderPriority}\r\n                                    onClick={handleTogglePriority}\r\n                                    show={priority}\r\n                                  ></Select>\r\n                                  <List show={priority}>\r\n                                    {priorityAll.map(\r\n                                      ({ priorityId, priority }) => {\r\n                                        const selected =\r\n                                          priorityId === values.priorityId;\r\n                                        return (\r\n                                          <Option\r\n                                            key={priorityId}\r\n                                            className={\r\n                                              selected\r\n                                                ? \"text-[#42526e] bg-[rgba(9,30,66,0.04)] border-l-4 border-l-primary bg-opacity-20\"\r\n                                                : \"\"\r\n                                            }\r\n                                            onClick={() => {\r\n                                              setFieldValue(\r\n                                                \"priorityId\",\r\n                                                priorityId\r\n                                              );\r\n                                            }}\r\n                                          >\r\n                                            {priority}\r\n                                          </Option>\r\n                                        );\r\n                                      }\r\n                                    )}\r\n                                  </List>\r\n                                </Dropdow>\r\n                              </FormGroup>\r\n                              <FormGroup>\r\n                                <Label>Task Type</Label>\r\n                                <Dropdow>\r\n                                  <Select\r\n                                    className=\" text-text2 bg-bgInput\"\r\n                                    nodeRef={taskTypeRef}\r\n                                    placeholder={placeholderType}\r\n                                    onClick={handleToggleTaskType}\r\n                                    show={taskType}\r\n                                  ></Select>\r\n                                  <List show={taskType}>\r\n                                    {taskTypeAll.map(({ id, taskType }) => {\r\n                                      const selected = id === values.typeId;\r\n                                      return (\r\n                                        <Option\r\n                                          key={id}\r\n                                          className={\r\n                                            selected\r\n                                              ? \"text-[#42526e] bg-[rgba(9,30,66,0.04)] border-l-4 border-l-primary bg-opacity-20\"\r\n                                              : \"\"\r\n                                          }\r\n                                          onClick={() => {\r\n                                            setFieldValue(\"typeId\", id);\r\n                                          }}\r\n                                        >\r\n                                          {taskType}\r\n                                        </Option>\r\n                                      );\r\n                                    })}\r\n                                  </List>\r\n                                </Dropdow>\r\n                              </FormGroup>\r\n                            </FormRow>\r\n                            <FormGroup>\r\n                              <Label>Status</Label>\r\n                              <Dropdow>\r\n                                <Select\r\n                                  nodeRef={statusRef}\r\n                                  placeholder={placeholderStatus}\r\n                                  onClick={handleToggleStatus}\r\n                                  show={status}\r\n                                ></Select>\r\n                                <List show={status}>\r\n                                  {statuses.map(({ statusId, statusName }) => {\r\n                                    const selected =\r\n                                      statusId === values.statusId;\r\n                                    return (\r\n                                      <Option\r\n                                        key={statusId}\r\n                                        className={\r\n                                          selected\r\n                                            ? \"text-[#42526e] bg-[rgba(9,30,66,0.04)] border-l-4 border-l-primary bg-opacity-20\"\r\n                                            : \"\"\r\n                                        }\r\n                                        onClick={() => {\r\n                                          setFieldValue(\"statusId\", statusId);\r\n                                        }}\r\n                                      >\r\n                                        {statusName}\r\n                                      </Option>\r\n                                    );\r\n                                  })}\r\n                                </List>\r\n                              </Dropdow>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                              <Label>Assigness</Label>\r\n                              <Dropdow>\r\n                                <SelectTag\r\n                                  onClick={() => {\r\n                                    setUserTag(!userTag);\r\n                                  }}\r\n                                  nodeRef={nodeRef}\r\n                                  data={addUser}\r\n                                  show={userTag}\r\n                                  removeUser={removeUser}\r\n                                  clearListUser={clearListUser}\r\n                                  searchFilter={(\r\n                                    e: React.FormEvent<HTMLInputElement>\r\n                                  ) => {\r\n                                    setSearch(e.currentTarget.value);\r\n                                  }}\r\n                                  placeholder=\"Search assigness ...\"\r\n                                ></SelectTag>\r\n                                <ListTag show={userTag}>\r\n                                  {searchFilter(userAll)?.map((user) => {\r\n                                    const userExists = addUser.find(\r\n                                      (u) => u.userId === user.userId\r\n                                    );\r\n                                    return (\r\n                                      <div key={user.userId}>\r\n                                        <OptionTag\r\n                                          className={`${\r\n                                            userExists\r\n                                              ? \"text-[#42526e]  bg-[rgba(9,30,66,0.04)] border-l-4 border-l-primary\"\r\n                                              : null\r\n                                          }`}\r\n                                          onClick={() => {\r\n                                            if (userExists)\r\n                                              setAddUser((s) =>\r\n                                                s.filter(\r\n                                                  (u) =>\r\n                                                    u.userId !== user.userId\r\n                                                )\r\n                                              );\r\n                                            else\r\n                                              setAddUser(\r\n                                                (s) => s && [...s, user]\r\n                                              );\r\n                                          }}\r\n                                        >\r\n                                          <div className=\"flex items-center gap-x-3\">\r\n                                            <Avatar\r\n                                              size={25}\r\n                                              src={\r\n                                                <img\r\n                                                  src={user.avatar}\r\n                                                  alt=\"avatar\"\r\n                                                />\r\n                                              }\r\n                                            />\r\n                                            <span> {user.name}</span>\r\n                                          </div>\r\n                                          {userExists && (\r\n                                            <span className=\"text-primary\">\r\n                                              <i className=\"fa-solid fa-check\"></i>\r\n                                            </span>\r\n                                          )}\r\n                                        </OptionTag>\r\n                                      </div>\r\n                                    );\r\n                                  })}\r\n                                </ListTag>\r\n                              </Dropdow>\r\n                            </FormGroup>\r\n\r\n                            <FormGroup>\r\n                              <Label>Time Tracking</Label>\r\n                              <Slider\r\n                                name=\"Tracking\"\r\n                                min={spent}\r\n                                max={estimate - spent}\r\n                                defaultValue={spent}\r\n                              ></Slider>\r\n                            </FormGroup>\r\n                            <FormRow>\r\n                              <FormGroup>\r\n                                <Label htmlFor=\"originalEstimate\">\r\n                                  Original Estimate (hours)\r\n                                </Label>\r\n                                <Input\r\n                                  className=\"appearance-none bg-bgInput\"\r\n                                  id=\"originalEstimate\"\r\n                                  name=\"originalEstimate\"\r\n                                  type=\"number\"\r\n                                  placeholder=\"Original Estimate...\"\r\n                                ></Input>\r\n                              </FormGroup>\r\n                              <FormGroup>\r\n                                <Label htmlFor=\"timeTrackingSpent\">\r\n                                  Time Spent (hours)\r\n                                </Label>\r\n                                <Input\r\n                                  className=\"appearance-none bg-bgInput\"\r\n                                  id=\"timeTrackingSpent\"\r\n                                  name=\"timeTrackingSpent\"\r\n                                  type=\"number\"\r\n                                  placeholder=\"Time Spent...\"\r\n                                ></Input>\r\n                              </FormGroup>\r\n                            </FormRow>\r\n                            <div className=\"flex items-center justify-end gap-x-3 \">\r\n                              <Button\r\n                                onClick={() => {\r\n                                  resetForm();\r\n                                }}\r\n                                type=\"button\"\r\n                                kind=\"cancel\"\r\n                              >\r\n                                Cancel\r\n                              </Button>\r\n                              <Button type=\"submit\" kind=\"success\">\r\n                                Save\r\n                              </Button>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                </Form>\r\n              );\r\n            }}\r\n          </Formik>\r\n        </ModalBase>\r\n      )}\r\n      <Link\r\n        onClick={() => {\r\n          handleOpenModal();\r\n        }}\r\n        to={`/project-detail/${projectId}/${taskId}`}\r\n      >\r\n        <li\r\n          ref={drag}\r\n          className=\"my-2 bg-white border-2 border-dashed border-transparent p-5 shadow rounded-md cursor-grab \"\r\n        >\r\n          <div className=\"flex flex-col gap-y-5 \">\r\n            <div className=\"flex items-start justify-between\">\r\n              <div className=\"w-[65%]\">\r\n                <span className=\"text-base font-medium text-text5\">\r\n                  {taskName}\r\n                </span>\r\n              </div>\r\n              <div>\r\n                <span\r\n                  className={`px-2 py-1 text-xs text-${colorTaskType} bg-${colorTaskType} bg-opacity-20 font-medium rounded-lg`}\r\n                >\r\n                  {taskTypeDetail.taskType}\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <span\r\n                  className={`${colorPriority} w-auto text-white text-xs font-semibold rounded-sm  px-2 py-1`}\r\n                >\r\n                  {priorityTask.priority}\r\n                </span>\r\n              </div>\r\n              <Avatar.Group\r\n                maxCount={2}\r\n                maxStyle={{\r\n                  color: \"#f56a00\",\r\n                  backgroundColor: \"#fde3cf\",\r\n                }}\r\n              >\r\n                {assigness.map(({ avatar, id, name }) => (\r\n                  <Tooltip key={id} title={name} placement=\"top\">\r\n                    <Avatar src={<img src={avatar} alt={`${name} avatar`} />} />\r\n                  </Tooltip>\r\n                ))}\r\n              </Avatar.Group>\r\n            </div>\r\n          </div>\r\n        </li>\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskCard;\r\n","import React, { useMemo } from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../redux/config\";\r\nimport { ItemType } from \"../../types/global\";\r\n\r\ntype Props = {\r\n  children: React.ReactNode;\r\n  name: string;\r\n  id: string;\r\n};\r\n\r\nconst TaskBox = ({ children, name, id }: Props) => {\r\n  const [colorText, colorBg, icon] = useMemo(() => {\r\n    let text, bg, icon;\r\n    if (id === \"1\") {\r\n      text = \"text-blue-500\";\r\n      bg = \"bg-blue-200\";\r\n      icon = \"🌞\";\r\n    } else if (id === \"2\") {\r\n      text = \"text-orange-500\";\r\n      bg = \"bg-orange-200\";\r\n      icon = \"📝\";\r\n    } else if (id === \"3\") {\r\n      text = \"text-red-500\";\r\n      bg = \"bg-red-200\";\r\n      icon = \"⏳\";\r\n    } else {\r\n      text = \"text-green-500\";\r\n      bg = \"bg-green-200\";\r\n      icon = \"✅\";\r\n    }\r\n    return [text, bg, icon];\r\n  }, [id]);\r\n\r\n  const { statuses } = useSelector((state: RootState) => state.statusReducer);\r\n\r\n  const [{ isOver, canDrop }, drop] = useDrop(() => ({\r\n    accept: ItemType.BOX,\r\n    drop: () => ({ statusName: name, statusId: id }),\r\n    canDrop: (item: any, monitor) => {\r\n      // console.log(\"item canDrop\", item);\r\n      const itemIndex = statuses.findIndex(\r\n        (si) => si.statusId === item.statusId\r\n      );\r\n      const statusIndex = statuses.findIndex((si) => si.statusName === name);\r\n      return [\r\n        itemIndex + 1,\r\n        itemIndex - 1,\r\n        itemIndex + 2,\r\n        itemIndex - 2,\r\n        itemIndex,\r\n      ].includes(statusIndex);\r\n    },\r\n    hover: (item, monitor) => {\r\n      // console.log(\"itemcanDrop\", item);\r\n    },\r\n    collect: (monitor) => ({\r\n      isOver: monitor.isOver(),\r\n      canDrop: monitor.canDrop(),\r\n    }),\r\n  }));\r\n\r\n  // const isActive = isOver && canDrop;\r\n  // console.log(\"isOver\", isOver);\r\n  // console.log(\"canDrop\", canDrop);\r\n\r\n  return (\r\n    <div\r\n      ref={drop}\r\n      className={`${\r\n        canDrop ? \"bg-error\" : \"bg-[rgba(9,30,66,0.04)]\"\r\n      }flex flex-col w-80 min-w-[280px] rounded-lg bg-[rgba(9,30,66,0.04)]`}\r\n    >\r\n      <div className={` ${colorBg} rounded px-3 py-1 flex items-center`}>\r\n        <span\r\n          className={`text-lg px-3 pt-3 pb-1 font-semibold ${colorText} leading-tight font-mono`}\r\n        >\r\n          {name + icon}\r\n        </span>\r\n      </div>\r\n      <div className=\"flex-1 min-h-0\">\r\n        <ul className=\"pt-1 pb-3 px-3\">{children}</ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskBox;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Avatar, Tooltip } from \"antd\";\r\nimport * as Yup from \"yup\";\r\nimport { DispathType, RootState } from \"../../redux/config\";\r\nimport HeaderSearch from \"../../components/HeaderSearch/HeaderSearch\";\r\nimport Button from \"../../components/Button/Button\";\r\nimport TaskCard from \"../../components/TaskDetail/TaskCard\";\r\nimport TaskBox from \"../../components/TaskDetail/TaskBox\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getStatusApi } from \"../../redux/statusReducer/statusReducer\";\r\nimport {\r\n  assignUserProject,\r\n  createTask,\r\n  getLstTaskAction,\r\n  getProjectDetailApi,\r\n  getTaskTypeApi,\r\n  removeUserFromProject,\r\n} from \"../../redux/projectReducer/projectReducer\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { CreateTaskType, LstTaskDeTail, UserModel } from \"../../types/global\";\r\nimport { getUserApi } from \"../../redux/userReducer/userReducer\";\r\nimport ModalBase from \"../../components/Modal/ModalBase\";\r\nimport { useToast } from \"../../components/Toast\";\r\nimport { getStoreJson, USER_LOGIN } from \"../../util/setting\";\r\nimport { Form, Formik } from \"formik\";\r\nimport FormRow from \"../../components/common/FormRow/FormRow\";\r\nimport FormGroup from \"../../components/common/FormGroup/FormGroup\";\r\nimport Label from \"../../components/Label/Label\";\r\nimport Dropdown from \"../../components/Dropdown/Dropdow\";\r\nimport Select from \"../../components/Dropdown/Select\";\r\nimport List from \"../../components/Dropdown/List\";\r\nimport Option from \"../../components/Dropdown/Option\";\r\nimport Input from \"../../components/Input/Input\";\r\nimport useClickOutside from \"../../hooks/useClickOutside\";\r\nimport SelectTag from \"../../components/Dropdown/SelectTag\";\r\nimport OptionTag from \"../../components/Dropdown/OptionTag\";\r\nimport ListTag from \"../../components/Dropdown/ListTag\";\r\nimport { getPriorityApi } from \"../../redux/priorityReducer/priorityReducer\";\r\nimport Slider from \"../../components/Slider/Slider\";\r\nimport TextTiny from \"../../components/Input/TextTiny\";\r\n\r\nconst ProjectDetail = () => {\r\n  const params = useParams();\r\n  const dispatch: DispathType = useDispatch();\r\n  const { statuses } = useSelector((state: RootState) => state.statusReducer);\r\n  const { projectDetail, lstTask } = useSelector(\r\n    (state: RootState) => state.projectReducer\r\n  );\r\n  const { userAll } = useSelector((state: RootState) => state.userReducer);\r\n\r\n  const { members, id, projectName, creator } = projectDetail;\r\n  useEffect(() => {\r\n    dispatch(getStatusApi());\r\n    dispatch(getProjectDetailApi(params));\r\n    dispatch(getUserApi());\r\n  }, [dispatch, params]);\r\n\r\n  async function changeStatusName(\r\n    item: LstTaskDeTail,\r\n    statusId: string,\r\n    taskId: number\r\n  ) {\r\n    const idx = lstTask.findIndex((it) => it.statusId === item.statusId);\r\n    if (idx === -1) {\r\n      return lstTask;\r\n    }\r\n\r\n    const updatedLstTask = lstTask.map((it, i) => {\r\n      if (i !== idx) {\r\n        return it;\r\n      }\r\n\r\n      const updatedLstTaskDetail = it.lstTaskDeTail.map((task) => {\r\n        if (task.taskId === taskId) {\r\n          return {\r\n            ...task,\r\n            statusId,\r\n          };\r\n        }\r\n        return task;\r\n      });\r\n\r\n      return {\r\n        ...it,\r\n        lstTaskDeTail: updatedLstTaskDetail,\r\n      };\r\n    });\r\n    await dispatch(getLstTaskAction(updatedLstTask));\r\n    dispatch(getProjectDetailApi(params));\r\n  }\r\n\r\n  // Admin\r\n  const admin = getStoreJson(USER_LOGIN);\r\n  const { add } = useToast();\r\n\r\n  const [openModalMember, setOpenModalMember] = useState<boolean>(false);\r\n  const [openModalCreateTask, setOpenModalCreateTask] =\r\n    useState<boolean>(false);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [search, setSearch] = useState<string>(\"\");\r\n  const searchFilter = (data: UserModel[]) => {\r\n    return data?.filter((item) => item.name?.toLowerCase().includes(search));\r\n  };\r\n  const handleToggleModalMember = async () => {\r\n    setIsLoading(true);\r\n    await setOpenModalMember(true);\r\n    setIsLoading(false);\r\n  };\r\n\r\n  // Create task\r\n  const handleOpenModal = async () => {\r\n    setIsLoading(true);\r\n\r\n    await dispatch(getTaskTypeApi());\r\n    await dispatch(getStatusApi());\r\n    await dispatch(getPriorityApi());\r\n    setOpenModalCreateTask(true);\r\n    setIsLoading(false);\r\n  };\r\n  const { priority: priorityAll } = useSelector(\r\n    (state: RootState) => state.priorityReducer\r\n  );\r\n  const { taskType: taskTypeAll } = useSelector(\r\n    (state: RootState) => state.projectReducer\r\n  );\r\n  const [addUser, setAddUser] = useState<UserModel[]>([]);\r\n  const { nodeRef, show: userTag, setShow: setUserTag } = useClickOutside();\r\n\r\n  const removeUser = (id: number) => {\r\n    setAddUser(addUser.filter((item) => item.userId !== id));\r\n  };\r\n  const clearListUser = () => {\r\n    setAddUser(addUser.slice(addUser.length, addUser.length));\r\n  };\r\n\r\n  const {\r\n    show: status,\r\n    setShow: setStatus,\r\n    nodeRef: statusRef,\r\n  } = useClickOutside();\r\n  const {\r\n    show: priority,\r\n    setShow: setPriority,\r\n    nodeRef: priorityRef,\r\n  } = useClickOutside();\r\n  const {\r\n    show: taskType,\r\n    setShow: setTaskType,\r\n    nodeRef: taskTypeRef,\r\n  } = useClickOutside();\r\n  const handleToggleStatus = () => {\r\n    setStatus(!status);\r\n  };\r\n  const handleTogglePriority = () => {\r\n    setPriority(!priority);\r\n  };\r\n  const handleToggleTaskType = () => {\r\n    setTaskType(!taskType);\r\n  };\r\n\r\n  const initialValues: CreateTaskType = {\r\n    listUserAsign: [],\r\n    taskName: \"\",\r\n    description: \"\",\r\n    statusId: \"\",\r\n    originalEstimate: 0,\r\n    timeTrackingSpent: 0,\r\n    timeTrackingRemaining: 0,\r\n    projectId: id,\r\n    typeId: 0,\r\n    priorityId: 0,\r\n  };\r\n  return (\r\n    <>\r\n      {/* Modal create task */}\r\n      {openModalCreateTask && (\r\n        <ModalBase\r\n          visible={openModalCreateTask}\r\n          onClose={() => {\r\n            setOpenModalCreateTask(false);\r\n          }}\r\n        >\r\n          {isLoading ? (\r\n            <div className=\"w-8 h-8 rounded-full border-4 border-blue-300 border-t-transparent animate-spin\"></div>\r\n          ) : (\r\n            <div className=\"relative bg-white max-w-[900px] w-[9000px] max-h-[650px] h-[650px] overflow-x-hidden overflow-y-auto rounded-lg scrollbar-none shadow-sdSecondary\">\r\n              <>\r\n                <div className=\"bg-white rounded-xl py-10 px-[66px]\">\r\n                  <div className=\"text-center\">\r\n                    <h1 className=\"py-4 px-14  bg-text4 bg-opacity-5 rounded-xl font-bold text-[25px] inline-block\">\r\n                      Create Task 🐱\r\n                    </h1>\r\n\r\n                    <Formik\r\n                      initialValues={initialValues}\r\n                      validationSchema={Yup.object().shape({\r\n                        taskName: Yup.string().required(\"\"),\r\n                        statusId: Yup.string().required(\"\"),\r\n                        originalEstimate: Yup.string().required(\"\"),\r\n                        timeTrackingSpent: Yup.string().required(\"\"),\r\n                        timeTrackingRemaining: Yup.string().required(\"\"),\r\n                        typeId: Yup.string().required(\"\"),\r\n                        priorityId: Yup.string().required(\"\"),\r\n                      })}\r\n                      onSubmit={async (\r\n                        {\r\n                          listUserAsign,\r\n                          taskName,\r\n                          description,\r\n                          statusId,\r\n                          originalEstimate,\r\n                          timeTrackingSpent,\r\n                          timeTrackingRemaining,\r\n                          projectId,\r\n                          typeId,\r\n                          priorityId,\r\n                        },\r\n                        { setSubmitting, resetForm }\r\n                      ) => {\r\n                        if (admin.id === creator.id) {\r\n                          listUserAsign = addUser.map((item) => item.userId);\r\n                          timeTrackingRemaining =\r\n                            originalEstimate - timeTrackingSpent;\r\n                          setSubmitting(true);\r\n                          await dispatch(\r\n                            createTask({\r\n                              listUserAsign,\r\n                              taskName,\r\n                              description,\r\n                              statusId,\r\n                              originalEstimate,\r\n                              timeTrackingSpent,\r\n                              timeTrackingRemaining,\r\n                              projectId,\r\n                              typeId,\r\n                              priorityId,\r\n                            })\r\n                          );\r\n                          await dispatch(getProjectDetailApi(params));\r\n                          add({\r\n                            type: \"success\",\r\n                            message: \"Create task successfully\",\r\n                            duration: 5000,\r\n                            position: \"topCenter\",\r\n                          });\r\n                          resetForm();\r\n                          setOpenModalCreateTask(false);\r\n                        } else {\r\n                          setOpenModalCreateTask(false);\r\n                          add({\r\n                            type: \"warning\",\r\n                            message:\r\n                              \"Could not create task.You need a project first!\",\r\n                            duration: 5000,\r\n                            position: \"topCenter\",\r\n                          });\r\n                        }\r\n                      }}\r\n                    >\r\n                      {({ isSubmitting, errors, setFieldValue, values }) => {\r\n                        const { priorityId, statusId, typeId } = values;\r\n                        const placeholderPriority =\r\n                          priorityId === 1\r\n                            ? \"🟥 High\"\r\n                            : priorityId === 2\r\n                            ? \"🟨 Medium\"\r\n                            : priorityId === 3\r\n                            ? \"🟩 Low\"\r\n                            : priorityId === 4\r\n                            ? \"🟩 Lowest\"\r\n                            : \"Seclect a priority...\";\r\n                        const placeholderStatus =\r\n                          statusId === \"1\"\r\n                            ? \"💙 BACKLOG\"\r\n                            : statusId === \"2\"\r\n                            ? \"🧡 SELECTED FOR DEVELOPMENT\"\r\n                            : statusId === \"3\"\r\n                            ? \"❤️ IN PROGRESS\"\r\n                            : statusId === \"4\"\r\n                            ? \"💚 DONE\"\r\n                            : \"Seclect a status...\";\r\n                        const placeholderType =\r\n                          typeId === 1\r\n                            ? \"🐞 BUG\"\r\n                            : typeId === 2\r\n                            ? \"✅ NEW TASK\"\r\n                            : \"Seclect a type task...\";\r\n                        return (\r\n                          <Form>\r\n                            <FormGroup>\r\n                              <Label htmlFor=\"taskName\">Task name *</Label>\r\n                              <Input\r\n                                id=\"taskName\"\r\n                                name=\"taskName\"\r\n                                type=\"text\"\r\n                                placeholder=\"Please enter task name...\"\r\n                              />\r\n                            </FormGroup>\r\n\r\n                            <FormRow className=\"grid-cols-2\">\r\n                              <FormGroup>\r\n                                <Label>Priority *</Label>\r\n                                <Dropdown>\r\n                                  <Select\r\n                                    nodeRef={priorityRef}\r\n                                    show={priority}\r\n                                    placeholder={placeholderPriority}\r\n                                    onClick={handleTogglePriority}\r\n                                  />\r\n                                  <List show={priority}>\r\n                                    {priorityAll.map(\r\n                                      ({ priorityId, priority }) => {\r\n                                        const selected =\r\n                                          priorityId === values.priorityId;\r\n                                        return (\r\n                                          <Option\r\n                                            key={priorityId}\r\n                                            className={\r\n                                              selected\r\n                                                ? \"text-[#42526e] bg-[rgba(9,30,66,0.04)] border-l-4 border-l-primary bg-opacity-20\"\r\n                                                : \"\"\r\n                                            }\r\n                                            onClick={() => {\r\n                                              setFieldValue(\r\n                                                \"priorityId\",\r\n                                                priorityId\r\n                                              );\r\n                                            }}\r\n                                          >\r\n                                            {priority}\r\n                                          </Option>\r\n                                        );\r\n                                      }\r\n                                    )}\r\n                                  </List>\r\n                                </Dropdown>\r\n                              </FormGroup>\r\n                              <FormGroup>\r\n                                <Label>Task Type *</Label>\r\n                                <Dropdown>\r\n                                  <Select\r\n                                    nodeRef={taskTypeRef}\r\n                                    show={taskType}\r\n                                    placeholder={placeholderType}\r\n                                    onClick={handleToggleTaskType}\r\n                                  />\r\n                                  <List show={taskType}>\r\n                                    {taskTypeAll.map(({ id, taskType }) => {\r\n                                      const selected = id === values.typeId;\r\n                                      return (\r\n                                        <Option\r\n                                          key={id}\r\n                                          className={\r\n                                            selected\r\n                                              ? \"text-[#42526e] bg-[rgba(9,30,66,0.04)] border-l-4 border-l-primary bg-opacity-20\"\r\n                                              : \"\"\r\n                                          }\r\n                                          onClick={() => {\r\n                                            setFieldValue(\"typeId\", id);\r\n                                          }}\r\n                                        >\r\n                                          {taskType}\r\n                                        </Option>\r\n                                      );\r\n                                    })}\r\n                                  </List>\r\n                                </Dropdown>\r\n                              </FormGroup>\r\n                            </FormRow>\r\n                            <FormRow>\r\n                              <FormGroup>\r\n                                <FormGroup>\r\n                                  <Label>Status *</Label>\r\n                                  <Dropdown>\r\n                                    <Select\r\n                                      nodeRef={statusRef}\r\n                                      show={status}\r\n                                      placeholder={placeholderStatus}\r\n                                      onClick={handleToggleStatus}\r\n                                    />\r\n                                    <List show={status}>\r\n                                      {statuses.map(\r\n                                        ({ statusId, statusName }) => {\r\n                                          const selected =\r\n                                            statusId === values.statusId;\r\n                                          return (\r\n                                            <Option\r\n                                              key={statusId}\r\n                                              className={\r\n                                                selected\r\n                                                  ? \"text-[#42526e] bg-[rgba(9,30,66,0.04)] border-l-4 border-l-primary bg-opacity-20\"\r\n                                                  : \"\"\r\n                                              }\r\n                                              onClick={() => {\r\n                                                setFieldValue(\r\n                                                  \"statusId\",\r\n                                                  statusId\r\n                                                );\r\n                                              }}\r\n                                            >\r\n                                              {statusName}\r\n                                            </Option>\r\n                                          );\r\n                                        }\r\n                                      )}\r\n                                    </List>\r\n                                  </Dropdown>\r\n                                </FormGroup>\r\n                              </FormGroup>\r\n                              <FormGroup>\r\n                                <Label>Assigness</Label>\r\n                                <Dropdown>\r\n                                  <SelectTag\r\n                                    onClick={() => {\r\n                                      setUserTag(!userTag);\r\n                                    }}\r\n                                    nodeRef={nodeRef}\r\n                                    data={addUser}\r\n                                    show={userTag}\r\n                                    removeUser={removeUser}\r\n                                    clearListUser={clearListUser}\r\n                                    searchFilter={(\r\n                                      e: React.FormEvent<HTMLInputElement>\r\n                                    ) => {\r\n                                      setSearch(e.currentTarget.value);\r\n                                    }}\r\n                                    placeholder=\"Search assigness ...\"\r\n                                  ></SelectTag>\r\n                                  <ListTag show={userTag}>\r\n                                    {searchFilter(userAll)?.map((user) => {\r\n                                      const userExists = addUser.find(\r\n                                        (u) => u.userId === user.userId\r\n                                      );\r\n                                      return (\r\n                                        <div key={user.userId}>\r\n                                          <OptionTag\r\n                                            className={`${\r\n                                              userExists\r\n                                                ? \"text-[#42526e]  bg-[rgba(9,30,66,0.04)] border-l-4 border-l-primary\"\r\n                                                : null\r\n                                            }`}\r\n                                            onClick={() => {\r\n                                              if (userExists)\r\n                                                setAddUser((s) =>\r\n                                                  s.filter(\r\n                                                    (u) =>\r\n                                                      u.userId !== user.userId\r\n                                                  )\r\n                                                );\r\n                                              else\r\n                                                setAddUser(\r\n                                                  (s) => s && [...s, user]\r\n                                                );\r\n                                            }}\r\n                                          >\r\n                                            <div className=\"flex items-center gap-x-3\">\r\n                                              <Avatar\r\n                                                size={25}\r\n                                                src={\r\n                                                  <img\r\n                                                    src={user.avatar}\r\n                                                    alt=\"avatar\"\r\n                                                  />\r\n                                                }\r\n                                              />\r\n                                              <span> {user.name}</span>\r\n                                            </div>\r\n                                            {userExists && (\r\n                                              <span className=\"text-primary\">\r\n                                                <i className=\"fa-solid fa-check\"></i>\r\n                                              </span>\r\n                                            )}\r\n                                          </OptionTag>\r\n                                        </div>\r\n                                      );\r\n                                    })}\r\n                                  </ListTag>\r\n                                </Dropdown>\r\n                              </FormGroup>\r\n                            </FormRow>\r\n                            <FormRow className=\"grid-cols-3\">\r\n                              <FormGroup>\r\n                                <Label>Time Tracking</Label>\r\n                                <Slider\r\n                                  name=\"Tracking\"\r\n                                  min={0}\r\n                                  max={100}\r\n                                  defaultValue={30}\r\n                                ></Slider>\r\n                              </FormGroup>\r\n                              <FormGroup>\r\n                                <Label>Original Estimate (hours)</Label>\r\n                                <Input\r\n                                  className=\"appearance-none bg-bgInput\"\r\n                                  id=\"originalEstimate\"\r\n                                  name=\"originalEstimate\"\r\n                                  type=\"number\"\r\n                                  placeholder=\"Original Estimate...\"\r\n                                />\r\n                              </FormGroup>\r\n                              <FormGroup>\r\n                                <Label>Time Spent (hours)</Label>\r\n                                <Input\r\n                                  className=\"appearance-none bg-bgInput\"\r\n                                  id=\"timeTrackingSpent\"\r\n                                  name=\"timeTrackingSpent\"\r\n                                  type=\"number\"\r\n                                  placeholder=\"Time Spent...\"\r\n                                />\r\n                              </FormGroup>\r\n                            </FormRow>\r\n\r\n                            <FormGroup>\r\n                              <Label>Description *</Label>\r\n                              <TextTiny control=\"tiny-mce\" name=\"description\" />\r\n                            </FormGroup>\r\n\r\n                            <div className=\" flex items-center justify-center\">\r\n                              <Button\r\n                                type=\"submit\"\r\n                                className=\" my-3\"\r\n                                kind=\"primary\"\r\n                              >\r\n                                Add new task\r\n                              </Button>\r\n                            </div>\r\n                          </Form>\r\n                        );\r\n                      }}\r\n                    </Formik>\r\n                  </div>\r\n                </div>\r\n              </>\r\n            </div>\r\n          )}\r\n        </ModalBase>\r\n      )}\r\n      {/* Modal add member */}\r\n      {openModalMember && (\r\n        <ModalBase\r\n          visible={openModalMember}\r\n          onClose={() => {\r\n            setOpenModalMember(false);\r\n          }}\r\n        >\r\n          {isLoading ? (\r\n            <div className=\"w-8 h-8 rounded-full border-4 border-blue-300 border-t-transparent animate-spin\"></div>\r\n          ) : (\r\n            <div className=\"relative bg-white max-w-[750px] w-[750px] max-h-[650px] h-[650px] overflow-hidden rounded-lg shadow-sdSecondary\">\r\n              <div key={id + projectName}>\r\n                <div className=\"flex items-start justify-between mx-5 mt-5\">\r\n                  <div className=\" flex items-center gap-x-3\">\r\n                    <div className=\"text-text2 font-medium\">ID :</div>\r\n                    <span className=\"flex items-center justify-center min-w-[45px] h-[45px] rounded-lg shadow-sdThirty text-text2 font-semibold select-none\">\r\n                      {id}\r\n                    </span>\r\n                  </div>\r\n                  <span\r\n                    className=\"text-text2 hover:text-error select-none cursor-pointer\"\r\n                    onClick={() => {\r\n                      setOpenModalMember(false);\r\n                    }}\r\n                  >\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      fill=\"none\"\r\n                      viewBox=\"0 0 24 24\"\r\n                      strokeWidth=\"1.5\"\r\n                      stroke=\"currentColor\"\r\n                      className=\"w-6 h-6\"\r\n                    >\r\n                      <path\r\n                        strokeLinecap=\"round\"\r\n                        strokeLinejoin=\"round\"\r\n                        d=\"M6 18L18 6M6 6l12 12\"\r\n                      />\r\n                    </svg>\r\n                  </span>\r\n                </div>\r\n                <h2 className=\"mt-5 text-2xl text-center text-text5 font-bold \">\r\n                  {projectName}\r\n                </h2>\r\n                <div className=\"flex items-start justify-between\">\r\n                  <div className=\"w-[55%] p-4 \">\r\n                    <h3 className=\"text-text5 text-2xl font-mono font-semibold py-2 text-center\">\r\n                      Add member\r\n                    </h3>\r\n\r\n                    <div className=\"mt-3\">\r\n                      <input\r\n                        className=\"p-4 outline-none w-full border border-gray-200 rounded\"\r\n                        type=\"text\"\r\n                        placeholder=\"Search user...\"\r\n                        onChange={(e: React.FormEvent<HTMLInputElement>) => {\r\n                          setSearch(e.currentTarget.value);\r\n                        }}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"overflow-x-hidden overflow-y-auto max-h-[400px] mx-w-[600px] scrollbar-none border border-strock mt-3 rounded-lg\">\r\n                      {searchFilter(userAll).map(({ avatar, name, userId }) => {\r\n                        return (\r\n                          <div\r\n                            key={userId}\r\n                            className=\"flex items-center justify-between p-4 border-b border-strock\"\r\n                          >\r\n                            <div className=\"flex items-center gap-x-2\">\r\n                              <Avatar\r\n                                src={\r\n                                  <img src={avatar} alt={`${name} avatar`} />\r\n                                }\r\n                              />\r\n                              <span className=\"text-text1 max-w-[250px] font-medium truncate\">\r\n                                {name}\r\n                              </span>\r\n                            </div>\r\n                            <button\r\n                              onClick={async () => {\r\n                                if (creator.id === admin.id) {\r\n                                  await dispatch(\r\n                                    assignUserProject({\r\n                                      projectId: id,\r\n                                      userId,\r\n                                    })\r\n                                  );\r\n                                  await dispatch(getProjectDetailApi(params));\r\n                                  await add({\r\n                                    type: \"success\",\r\n                                    message: `Add ${name} successfully`,\r\n                                    duration: 3000,\r\n                                    position: \"bottomLeft\",\r\n                                  });\r\n                                } else {\r\n                                  setOpenModalMember(false);\r\n                                  add({\r\n                                    type: \"warning\",\r\n                                    message:\r\n                                      \"Only the creator can add member in this project\",\r\n                                    duration: 3000,\r\n                                    position: \"bottomLeft\",\r\n                                  });\r\n                                }\r\n                              }}\r\n                              className=\"text-white font-medium font-mono bg-blue-500 px-2 py-1 rounded-lg\"\r\n                            >\r\n                              Add\r\n                            </button>\r\n                          </div>\r\n                        );\r\n                      })}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"w-[45%] p-4\">\r\n                    <h3 className=\"text-text5 text-2xl font-mono font-semibold py-2 text-center\">\r\n                      Remove member\r\n                    </h3>\r\n\r\n                    <div className=\"overflow-x-hidden overflow-y-auto border border-strock mt-3 rounded-lg max-h-[470px] scrollbar-none\">\r\n                      {members.map(({ avatar, name, userId }) => {\r\n                        return (\r\n                          <div\r\n                            key={userId}\r\n                            className=\"flex items-center justify-between p-4 border-b border-strock \"\r\n                          >\r\n                            <div className=\"flex items-center gap-x-2\">\r\n                              <Avatar\r\n                                src={\r\n                                  <img src={avatar} alt={`${name} avatar`} />\r\n                                }\r\n                              />\r\n                              <span className=\"text-text1 font-medium\">\r\n                                {name}\r\n                              </span>\r\n                            </div>\r\n                            <button\r\n                              onClick={async () => {\r\n                                if (creator.id === admin.id) {\r\n                                  await dispatch(\r\n                                    removeUserFromProject({\r\n                                      projectId: id,\r\n                                      userId,\r\n                                    })\r\n                                  );\r\n                                  await dispatch(getProjectDetailApi(params));\r\n\r\n                                  await add({\r\n                                    type: \"success\",\r\n                                    message: `Delete ${name} successfully`,\r\n                                    duration: 3000,\r\n                                    position: \"bottomLeft\",\r\n                                  });\r\n                                } else {\r\n                                  setOpenModalMember(false);\r\n                                  add({\r\n                                    type: \"warning\",\r\n                                    message:\r\n                                      \"Only the creator can delete member in this project\",\r\n                                    duration: 3000,\r\n                                    position: \"bottomLeft\",\r\n                                  });\r\n                                }\r\n                              }}\r\n                              className=\"text-white font-medium font-mono bg-error px-2 py-1 rounded-lg\"\r\n                            >\r\n                              Remove\r\n                            </button>\r\n                          </div>\r\n                        );\r\n                      })}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              );\r\n            </div>\r\n          )}\r\n        </ModalBase>\r\n      )}\r\n      <div className=\"bg-lite\">\r\n        <div className=\"bg-white rounded-3xl flex items-center justify-between py-8 px-10\">\r\n          <div className=\"flex items-center gap-x-5 md:w-auto\">\r\n            <HeaderSearch></HeaderSearch>\r\n\r\n            <div className=\"flex items-center gap-x-2\">\r\n              <Avatar.Group\r\n                maxCount={2}\r\n                maxStyle={{\r\n                  color: \"#f56a00\",\r\n                  backgroundColor: \"#fde3cf\",\r\n                }}\r\n              >\r\n                {members.map(({ name, avatar, userId }) => (\r\n                  <Tooltip key={userId} title={name} placement=\"top\">\r\n                    <Avatar src={<img src={avatar} alt={`${name} avatar`} />} />\r\n                  </Tooltip>\r\n                ))}\r\n              </Avatar.Group>\r\n              <span\r\n                onClick={() => {\r\n                  handleToggleModalMember();\r\n                }}\r\n                className=\"w-[32px] h-[32px] rounded-full border border-dashed flex items-center justify-center text-text3 border-text3 hover:text-text2 hover:border-text2 cursor-pointer select-none transition-all\"\r\n              >\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  fill=\"none\"\r\n                  viewBox=\"0 0 24 24\"\r\n                  strokeWidth=\"1.5\"\r\n                  stroke=\"currentColor\"\r\n                  className=\"w-6 h-6\"\r\n                >\r\n                  <path\r\n                    strokeLinecap=\"round\"\r\n                    strokeLinejoin=\"round\"\r\n                    d=\"M12 4.5v15m7.5-7.5h-15\"\r\n                  />\r\n                </svg>\r\n              </span>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"flex items-center gap-x-5\">\r\n            <Button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                handleOpenModal();\r\n              }}\r\n              kind=\"secondary\"\r\n              className=\"bg-secondary bg-opacity-20 hover:bg-opacity-40 transition-all text-secondary min-w-fit\"\r\n            >\r\n              Create task\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        {!!projectDetail ? (\r\n          <div className=\"bg-lite flex-1 overflow-auto \">\r\n            <main className=\"p-3 h-full flex items-start gap-x-5\">\r\n              {/* TODO */}\r\n              {statuses.map((si, i) => {\r\n                return (\r\n                  <TaskBox key={i} name={si.statusName} id={si.statusId}>\r\n                    {lstTask.map((item) => {\r\n                      const lstTaskDeTail: LstTaskDeTail[] = item.lstTaskDeTail;\r\n                      return lstTaskDeTail\r\n                        .filter((ti) => ti.statusId === si.statusId)\r\n                        .map((task, inx) => (\r\n                          <TaskCard\r\n                            key={task.taskId}\r\n                            index={inx}\r\n                            items={task}\r\n                            changeStatusName={changeStatusName}\r\n                          />\r\n                        ));\r\n                    })}\r\n                  </TaskBox>\r\n                );\r\n              })}\r\n            </main>\r\n          </div>\r\n        ) : (\r\n          <div className=\"flex justify-center items-center bg-lite h-[400px]\">\r\n            <div className=\"loader bg-lite p-5 rounded-full flex space-x-3\">\r\n              <div className=\"w-5 h-5 bg-error rounded-full animate-bounce\" />\r\n              <div className=\"w-5 h-5 bg-primary rounded-full animate-bounce\" />\r\n              <div className=\"w-5 h-5 bg-blue-500 rounded-full animate-bounce\" />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProjectDetail;\r\n"],"names":["children","onClick","className","isLoading","rest","child","defaultClassName","kind","href","to","show","placeholder","nodeRef","ref","xmlns","fill","viewBox","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","onChange","type","withErrorBoundary","props","useField","field","meta","touched","error","FallbackComponent","ErrorComponent","control","name","value","id","form","setFieldValue","initialValue","init","height","menubar","toolbar","content_style","onEditorChange","content","editor","htmlFor","portalWrapperElm","element","document","createElement","createPortalWrapper","containerClassName","bodyClassName","containerStyle","bodyStyle","onClose","visible","useEffect","body","appendChild","renderContent","style","createPortal","fillRule","clipRule","useClickOutside","useState","setShow","useRef","handleOutside","ev","current","contains","target","addEventListener","removeEventListener","ColumnType","data","searchFilter","removeUser","clearListUser","map","userId","length","OptionTag","memo","min","max","ItemType","index","items","changeStatusName","add","useToast","taskName","priorityTask","taskTypeDetail","statusId","taskId","projectId","assigness","estimate","originalEstimate","spent","timeTrackingSpent","timeTrackingRemaining","description","priorityId","typeId","taskTypeCurrent","taskType","statusCurrent","useDrag","item","end","monitor","dropResult","getDropResult","statusName","dispatch","updateStatus","message","duration","position","collect","isDragging","drag","dragPreview","colorPriority","priority","colorTaskType","comment","useSelector","state","commentReducer","priorityAll","priorityReducer","statuses","statusReducer","taskTypeAll","projectReducer","useDispatch","admin","getStoreJson","USER_LOGIN","userAll","userReducer","openModalBase","setOpenModalBase","openModalDeleteTask","setpenModalDeleteTask","addUser","setAddUser","search","setSearch","userTag","setUserTag","openDesc","setOpenDesc","openTaskName","setOpenTaskName","setIsLoading","isLoadingBtn","setIsLoadingBtn","isLoadingDel","setIsLoadingDel","handleOpenModal","avatar","prev","getCommentApi","getTaskTypeApi","getStatusApi","getPriorityApi","getUserApi","filter","slice","setTaskType","taskTypeRef","handleToggleTaskType","setPriority","priorityRef","handleTogglePriority","status","setStatus","statusRef","handleToggleStatus","initialValues","listUserAsign","ModalBase","IconError","Button","deleteTask","getProjectDetailByIdApi","onSubmit","setSubmitting","resetForm","updateTask","isSubmitting","values","placeholderPriority","placeholderStatus","placeholderType","Input","FormGroup","Label","TextTiny","dangerouslySetInnerHTML","__html","src","alt","insertCommentApi","contentComment","user","isActiveDelete","parseInt","deleteCommentApi","FormRow","Dropdow","Select","List","selected","Option","e","currentTarget","toLowerCase","includes","userExists","find","u","s","size","defaultValue","maxCount","maxStyle","color","backgroundColor","title","placement","useMemo","text","bg","icon","colorText","colorBg","useDrop","accept","drop","canDrop","itemIndex","findIndex","si","statusIndex","hover","isOver","params","useParams","projectDetail","lstTask","members","projectName","creator","idx","it","updatedLstTask","i","updatedLstTaskDetail","lstTaskDeTail","task","getLstTaskAction","getProjectDetailApi","openModalMember","setOpenModalMember","openModalCreateTask","setOpenModalCreateTask","handleToggleModalMember","validationSchema","Yup","shape","required","createTask","errors","assignUserProject","removeUserFromProject","HeaderSearch","ti","inx"],"sourceRoot":""}